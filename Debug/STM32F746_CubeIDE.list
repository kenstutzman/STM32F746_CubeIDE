
STM32F746_CubeIDE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004190  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004358  08004358  00014358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004370  08004370  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004370  08004370  00014370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004378  08004378  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004378  08004378  00014378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800437c  0800437c  0001437c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004380  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000318  2000000c  0800438c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000324  0800438c  00020324  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001186d  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026a5  00000000  00000000  000318a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f20  00000000  00000000  00033f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e18  00000000  00000000  00034e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002606e  00000000  00000000  00035c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001209d  00000000  00000000  0005bcf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ea1f2  00000000  00000000  0006dd93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00157f85  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ed8  00000000  00000000  00157fd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08004340 	.word	0x08004340

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08004340 	.word	0x08004340

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b96e 	b.w	80004fc <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468c      	mov	ip, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	f040 8083 	bne.w	800034e <__udivmoddi4+0x116>
 8000248:	428a      	cmp	r2, r1
 800024a:	4617      	mov	r7, r2
 800024c:	d947      	bls.n	80002de <__udivmoddi4+0xa6>
 800024e:	fab2 f282 	clz	r2, r2
 8000252:	b142      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000254:	f1c2 0020 	rsb	r0, r2, #32
 8000258:	fa24 f000 	lsr.w	r0, r4, r0
 800025c:	4091      	lsls	r1, r2
 800025e:	4097      	lsls	r7, r2
 8000260:	ea40 0c01 	orr.w	ip, r0, r1
 8000264:	4094      	lsls	r4, r2
 8000266:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800026a:	0c23      	lsrs	r3, r4, #16
 800026c:	fbbc f6f8 	udiv	r6, ip, r8
 8000270:	fa1f fe87 	uxth.w	lr, r7
 8000274:	fb08 c116 	mls	r1, r8, r6, ip
 8000278:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027c:	fb06 f10e 	mul.w	r1, r6, lr
 8000280:	4299      	cmp	r1, r3
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x60>
 8000284:	18fb      	adds	r3, r7, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 8119 	bcs.w	80004c0 <__udivmoddi4+0x288>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 8116 	bls.w	80004c0 <__udivmoddi4+0x288>
 8000294:	3e02      	subs	r6, #2
 8000296:	443b      	add	r3, r7
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002ac:	45a6      	cmp	lr, r4
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x8c>
 80002b0:	193c      	adds	r4, r7, r4
 80002b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b6:	f080 8105 	bcs.w	80004c4 <__udivmoddi4+0x28c>
 80002ba:	45a6      	cmp	lr, r4
 80002bc:	f240 8102 	bls.w	80004c4 <__udivmoddi4+0x28c>
 80002c0:	3802      	subs	r0, #2
 80002c2:	443c      	add	r4, r7
 80002c4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c8:	eba4 040e 	sub.w	r4, r4, lr
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa0>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	b902      	cbnz	r2, 80002e2 <__udivmoddi4+0xaa>
 80002e0:	deff      	udf	#255	; 0xff
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d150      	bne.n	800038c <__udivmoddi4+0x154>
 80002ea:	1bcb      	subs	r3, r1, r7
 80002ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f0:	fa1f f887 	uxth.w	r8, r7
 80002f4:	2601      	movs	r6, #1
 80002f6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002fa:	0c21      	lsrs	r1, r4, #16
 80002fc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000300:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000304:	fb08 f30c 	mul.w	r3, r8, ip
 8000308:	428b      	cmp	r3, r1
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0xe4>
 800030c:	1879      	adds	r1, r7, r1
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0xe2>
 8000314:	428b      	cmp	r3, r1
 8000316:	f200 80e9 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 800031a:	4684      	mov	ip, r0
 800031c:	1ac9      	subs	r1, r1, r3
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1110 	mls	r1, lr, r0, r1
 8000328:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x10c>
 8000334:	193c      	adds	r4, r7, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x10a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80d9 	bhi.w	80004f4 <__udivmoddi4+0x2bc>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e7bf      	b.n	80002ce <__udivmoddi4+0x96>
 800034e:	428b      	cmp	r3, r1
 8000350:	d909      	bls.n	8000366 <__udivmoddi4+0x12e>
 8000352:	2d00      	cmp	r5, #0
 8000354:	f000 80b1 	beq.w	80004ba <__udivmoddi4+0x282>
 8000358:	2600      	movs	r6, #0
 800035a:	e9c5 0100 	strd	r0, r1, [r5]
 800035e:	4630      	mov	r0, r6
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	fab3 f683 	clz	r6, r3
 800036a:	2e00      	cmp	r6, #0
 800036c:	d14a      	bne.n	8000404 <__udivmoddi4+0x1cc>
 800036e:	428b      	cmp	r3, r1
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0x140>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 80b8 	bhi.w	80004e8 <__udivmoddi4+0x2b0>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb61 0103 	sbc.w	r1, r1, r3
 800037e:	2001      	movs	r0, #1
 8000380:	468c      	mov	ip, r1
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0a8      	beq.n	80002d8 <__udivmoddi4+0xa0>
 8000386:	e9c5 4c00 	strd	r4, ip, [r5]
 800038a:	e7a5      	b.n	80002d8 <__udivmoddi4+0xa0>
 800038c:	f1c2 0320 	rsb	r3, r2, #32
 8000390:	fa20 f603 	lsr.w	r6, r0, r3
 8000394:	4097      	lsls	r7, r2
 8000396:	fa01 f002 	lsl.w	r0, r1, r2
 800039a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039e:	40d9      	lsrs	r1, r3
 80003a0:	4330      	orrs	r0, r6
 80003a2:	0c03      	lsrs	r3, r0, #16
 80003a4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b4:	fb06 f108 	mul.w	r1, r6, r8
 80003b8:	4299      	cmp	r1, r3
 80003ba:	fa04 f402 	lsl.w	r4, r4, r2
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x19c>
 80003c0:	18fb      	adds	r3, r7, r3
 80003c2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003c6:	f080 808d 	bcs.w	80004e4 <__udivmoddi4+0x2ac>
 80003ca:	4299      	cmp	r1, r3
 80003cc:	f240 808a 	bls.w	80004e4 <__udivmoddi4+0x2ac>
 80003d0:	3e02      	subs	r6, #2
 80003d2:	443b      	add	r3, r7
 80003d4:	1a5b      	subs	r3, r3, r1
 80003d6:	b281      	uxth	r1, r0
 80003d8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003dc:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e4:	fb00 f308 	mul.w	r3, r0, r8
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x1c4>
 80003ec:	1879      	adds	r1, r7, r1
 80003ee:	f100 3cff 	add.w	ip, r0, #4294967295
 80003f2:	d273      	bcs.n	80004dc <__udivmoddi4+0x2a4>
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d971      	bls.n	80004dc <__udivmoddi4+0x2a4>
 80003f8:	3802      	subs	r0, #2
 80003fa:	4439      	add	r1, r7
 80003fc:	1acb      	subs	r3, r1, r3
 80003fe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000402:	e778      	b.n	80002f6 <__udivmoddi4+0xbe>
 8000404:	f1c6 0c20 	rsb	ip, r6, #32
 8000408:	fa03 f406 	lsl.w	r4, r3, r6
 800040c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000410:	431c      	orrs	r4, r3
 8000412:	fa20 f70c 	lsr.w	r7, r0, ip
 8000416:	fa01 f306 	lsl.w	r3, r1, r6
 800041a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000422:	431f      	orrs	r7, r3
 8000424:	0c3b      	lsrs	r3, r7, #16
 8000426:	fbb1 f9fe 	udiv	r9, r1, lr
 800042a:	fa1f f884 	uxth.w	r8, r4
 800042e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000432:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000436:	fb09 fa08 	mul.w	sl, r9, r8
 800043a:	458a      	cmp	sl, r1
 800043c:	fa02 f206 	lsl.w	r2, r2, r6
 8000440:	fa00 f306 	lsl.w	r3, r0, r6
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x220>
 8000446:	1861      	adds	r1, r4, r1
 8000448:	f109 30ff 	add.w	r0, r9, #4294967295
 800044c:	d248      	bcs.n	80004e0 <__udivmoddi4+0x2a8>
 800044e:	458a      	cmp	sl, r1
 8000450:	d946      	bls.n	80004e0 <__udivmoddi4+0x2a8>
 8000452:	f1a9 0902 	sub.w	r9, r9, #2
 8000456:	4421      	add	r1, r4
 8000458:	eba1 010a 	sub.w	r1, r1, sl
 800045c:	b2bf      	uxth	r7, r7
 800045e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000462:	fb0e 1110 	mls	r1, lr, r0, r1
 8000466:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800046a:	fb00 f808 	mul.w	r8, r0, r8
 800046e:	45b8      	cmp	r8, r7
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x24a>
 8000472:	19e7      	adds	r7, r4, r7
 8000474:	f100 31ff 	add.w	r1, r0, #4294967295
 8000478:	d22e      	bcs.n	80004d8 <__udivmoddi4+0x2a0>
 800047a:	45b8      	cmp	r8, r7
 800047c:	d92c      	bls.n	80004d8 <__udivmoddi4+0x2a0>
 800047e:	3802      	subs	r0, #2
 8000480:	4427      	add	r7, r4
 8000482:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000486:	eba7 0708 	sub.w	r7, r7, r8
 800048a:	fba0 8902 	umull	r8, r9, r0, r2
 800048e:	454f      	cmp	r7, r9
 8000490:	46c6      	mov	lr, r8
 8000492:	4649      	mov	r1, r9
 8000494:	d31a      	bcc.n	80004cc <__udivmoddi4+0x294>
 8000496:	d017      	beq.n	80004c8 <__udivmoddi4+0x290>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x27a>
 800049a:	ebb3 020e 	subs.w	r2, r3, lr
 800049e:	eb67 0701 	sbc.w	r7, r7, r1
 80004a2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a6:	40f2      	lsrs	r2, r6
 80004a8:	ea4c 0202 	orr.w	r2, ip, r2
 80004ac:	40f7      	lsrs	r7, r6
 80004ae:	e9c5 2700 	strd	r2, r7, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	462e      	mov	r6, r5
 80004bc:	4628      	mov	r0, r5
 80004be:	e70b      	b.n	80002d8 <__udivmoddi4+0xa0>
 80004c0:	4606      	mov	r6, r0
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fd      	b.n	80002c4 <__udivmoddi4+0x8c>
 80004c8:	4543      	cmp	r3, r8
 80004ca:	d2e5      	bcs.n	8000498 <__udivmoddi4+0x260>
 80004cc:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d0:	eb69 0104 	sbc.w	r1, r9, r4
 80004d4:	3801      	subs	r0, #1
 80004d6:	e7df      	b.n	8000498 <__udivmoddi4+0x260>
 80004d8:	4608      	mov	r0, r1
 80004da:	e7d2      	b.n	8000482 <__udivmoddi4+0x24a>
 80004dc:	4660      	mov	r0, ip
 80004de:	e78d      	b.n	80003fc <__udivmoddi4+0x1c4>
 80004e0:	4681      	mov	r9, r0
 80004e2:	e7b9      	b.n	8000458 <__udivmoddi4+0x220>
 80004e4:	4666      	mov	r6, ip
 80004e6:	e775      	b.n	80003d4 <__udivmoddi4+0x19c>
 80004e8:	4630      	mov	r0, r6
 80004ea:	e74a      	b.n	8000382 <__udivmoddi4+0x14a>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	4439      	add	r1, r7
 80004f2:	e713      	b.n	800031c <__udivmoddi4+0xe4>
 80004f4:	3802      	subs	r0, #2
 80004f6:	443c      	add	r4, r7
 80004f8:	e724      	b.n	8000344 <__udivmoddi4+0x10c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000504:	f000 ff17 	bl	8001336 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000508:	f000 f820 	bl	800054c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050c:	f000 fb18 	bl	8000b40 <MX_GPIO_Init>
  MX_CRC_Init();
 8000510:	f000 f8c0 	bl	8000694 <MX_CRC_Init>
  MX_DMA2D_Init();
 8000514:	f000 f8e0 	bl	80006d8 <MX_DMA2D_Init>
  MX_LTDC_Init();
 8000518:	f000 fa10 	bl	800093c <MX_LTDC_Init>
  MX_I2C1_Init();
 800051c:	f000 f90e 	bl	800073c <MX_I2C1_Init>
  MX_I2C2_Init();
 8000520:	f000 f94c 	bl	80007bc <MX_I2C2_Init>
  MX_I2C3_Init();
 8000524:	f000 f98a 	bl	800083c <MX_I2C3_Init>
  MX_I2C4_Init();
 8000528:	f000 f9c8 	bl	80008bc <MX_I2C4_Init>
  MX_USART6_UART_Init();
 800052c:	f000 fa88 	bl	8000a40 <MX_USART6_UART_Init>
  MX_FMC_Init();
 8000530:	f000 fab6 	bl	8000aa0 <MX_FMC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(PD4_STATUS_LED_GPIO_Port, PD4_STATUS_LED_Pin);
 8000534:	2110      	movs	r1, #16
 8000536:	4804      	ldr	r0, [pc, #16]	; (8000548 <main+0x48>)
 8000538:	f001 fc1b 	bl	8001d72 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 800053c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000540:	f000 ff56 	bl	80013f0 <HAL_Delay>
	  HAL_GPIO_TogglePin(PD4_STATUS_LED_GPIO_Port, PD4_STATUS_LED_Pin);
 8000544:	e7f6      	b.n	8000534 <main+0x34>
 8000546:	bf00      	nop
 8000548:	40020c00 	.word	0x40020c00

0800054c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b0b4      	sub	sp, #208	; 0xd0
 8000550:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000552:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000556:	2230      	movs	r2, #48	; 0x30
 8000558:	2100      	movs	r1, #0
 800055a:	4618      	mov	r0, r3
 800055c:	f003 fee8 	bl	8004330 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000560:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000564:	2200      	movs	r2, #0
 8000566:	601a      	str	r2, [r3, #0]
 8000568:	605a      	str	r2, [r3, #4]
 800056a:	609a      	str	r2, [r3, #8]
 800056c:	60da      	str	r2, [r3, #12]
 800056e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000570:	f107 0308 	add.w	r3, r7, #8
 8000574:	2284      	movs	r2, #132	; 0x84
 8000576:	2100      	movs	r1, #0
 8000578:	4618      	mov	r0, r3
 800057a:	f003 fed9 	bl	8004330 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800057e:	4b42      	ldr	r3, [pc, #264]	; (8000688 <SystemClock_Config+0x13c>)
 8000580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000582:	4a41      	ldr	r2, [pc, #260]	; (8000688 <SystemClock_Config+0x13c>)
 8000584:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000588:	6413      	str	r3, [r2, #64]	; 0x40
 800058a:	4b3f      	ldr	r3, [pc, #252]	; (8000688 <SystemClock_Config+0x13c>)
 800058c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800058e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000592:	607b      	str	r3, [r7, #4]
 8000594:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000596:	4b3d      	ldr	r3, [pc, #244]	; (800068c <SystemClock_Config+0x140>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	4a3c      	ldr	r2, [pc, #240]	; (800068c <SystemClock_Config+0x140>)
 800059c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005a0:	6013      	str	r3, [r2, #0]
 80005a2:	4b3a      	ldr	r3, [pc, #232]	; (800068c <SystemClock_Config+0x140>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005aa:	603b      	str	r3, [r7, #0]
 80005ac:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005ae:	2301      	movs	r3, #1
 80005b0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005bc:	2302      	movs	r3, #2
 80005be:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005ca:	2304      	movs	r3, #4
 80005cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 200;
 80005d0:	23c8      	movs	r3, #200	; 0xc8
 80005d2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005d6:	2302      	movs	r3, #2
 80005d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005dc:	2302      	movs	r3, #2
 80005de:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f002 f8c0 	bl	800276c <HAL_RCC_OscConfig>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80005f2:	f000 fb43 	bl	8000c7c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80005f6:	f002 f869 	bl	80026cc <HAL_PWREx_EnableOverDrive>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000600:	f000 fb3c 	bl	8000c7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000604:	230f      	movs	r3, #15
 8000606:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800060a:	2302      	movs	r3, #2
 800060c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000610:	2300      	movs	r3, #0
 8000612:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000616:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800061a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800061e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000622:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000626:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800062a:	2106      	movs	r1, #6
 800062c:	4618      	mov	r0, r3
 800062e:	f002 fb41 	bl	8002cb4 <HAL_RCC_ClockConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8000638:	f000 fb20 	bl	8000c7c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_USART6
 800063c:	4b14      	ldr	r3, [pc, #80]	; (8000690 <SystemClock_Config+0x144>)
 800063e:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2
                              |RCC_PERIPHCLK_I2C3|RCC_PERIPHCLK_I2C4;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000640:	23c0      	movs	r3, #192	; 0xc0
 8000642:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000644:	2302      	movs	r3, #2
 8000646:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000648:	2302      	movs	r3, #2
 800064a:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 800064c:	2300      	movs	r3, #0
 800064e:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000650:	2301      	movs	r3, #1
 8000652:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000654:	2300      	movs	r3, #0
 8000656:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8000658:	2300      	movs	r3, #0
 800065a:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800065c:	2300      	movs	r3, #0
 800065e:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000660:	2300      	movs	r3, #0
 8000662:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000664:	2300      	movs	r3, #0
 8000666:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8000668:	2300      	movs	r3, #0
 800066a:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800066c:	f107 0308 	add.w	r3, r7, #8
 8000670:	4618      	mov	r0, r3
 8000672:	f002 fd21 	bl	80030b8 <HAL_RCCEx_PeriphCLKConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0x134>
  {
    Error_Handler();
 800067c:	f000 fafe 	bl	8000c7c <Error_Handler>
  }
}
 8000680:	bf00      	nop
 8000682:	37d0      	adds	r7, #208	; 0xd0
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	40023800 	.word	0x40023800
 800068c:	40007000 	.word	0x40007000
 8000690:	0003c808 	.word	0x0003c808

08000694 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000698:	4b0d      	ldr	r3, [pc, #52]	; (80006d0 <MX_CRC_Init+0x3c>)
 800069a:	4a0e      	ldr	r2, [pc, #56]	; (80006d4 <MX_CRC_Init+0x40>)
 800069c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800069e:	4b0c      	ldr	r3, [pc, #48]	; (80006d0 <MX_CRC_Init+0x3c>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80006a4:	4b0a      	ldr	r3, [pc, #40]	; (80006d0 <MX_CRC_Init+0x3c>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80006aa:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <MX_CRC_Init+0x3c>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80006b0:	4b07      	ldr	r3, [pc, #28]	; (80006d0 <MX_CRC_Init+0x3c>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80006b6:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <MX_CRC_Init+0x3c>)
 80006b8:	2201      	movs	r2, #1
 80006ba:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80006bc:	4804      	ldr	r0, [pc, #16]	; (80006d0 <MX_CRC_Init+0x3c>)
 80006be:	f000 ffcd 	bl	800165c <HAL_CRC_Init>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80006c8:	f000 fad8 	bl	8000c7c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80006cc:	bf00      	nop
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	20000110 	.word	0x20000110
 80006d4:	40023000 	.word	0x40023000

080006d8 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80006dc:	4b15      	ldr	r3, [pc, #84]	; (8000734 <MX_DMA2D_Init+0x5c>)
 80006de:	4a16      	ldr	r2, [pc, #88]	; (8000738 <MX_DMA2D_Init+0x60>)
 80006e0:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80006e2:	4b14      	ldr	r3, [pc, #80]	; (8000734 <MX_DMA2D_Init+0x5c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80006e8:	4b12      	ldr	r3, [pc, #72]	; (8000734 <MX_DMA2D_Init+0x5c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80006ee:	4b11      	ldr	r3, [pc, #68]	; (8000734 <MX_DMA2D_Init+0x5c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80006f4:	4b0f      	ldr	r3, [pc, #60]	; (8000734 <MX_DMA2D_Init+0x5c>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80006fa:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <MX_DMA2D_Init+0x5c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000700:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <MX_DMA2D_Init+0x5c>)
 8000702:	2200      	movs	r2, #0
 8000704:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000706:	4b0b      	ldr	r3, [pc, #44]	; (8000734 <MX_DMA2D_Init+0x5c>)
 8000708:	2200      	movs	r2, #0
 800070a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800070c:	4809      	ldr	r0, [pc, #36]	; (8000734 <MX_DMA2D_Init+0x5c>)
 800070e:	f001 f88f 	bl	8001830 <HAL_DMA2D_Init>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000718:	f000 fab0 	bl	8000c7c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800071c:	2101      	movs	r1, #1
 800071e:	4805      	ldr	r0, [pc, #20]	; (8000734 <MX_DMA2D_Init+0x5c>)
 8000720:	f001 f8d0 	bl	80018c4 <HAL_DMA2D_ConfigLayer>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800072a:	f000 faa7 	bl	8000c7c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	200002ac 	.word	0x200002ac
 8000738:	4002b000 	.word	0x4002b000

0800073c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000740:	4b1b      	ldr	r3, [pc, #108]	; (80007b0 <MX_I2C1_Init+0x74>)
 8000742:	4a1c      	ldr	r2, [pc, #112]	; (80007b4 <MX_I2C1_Init+0x78>)
 8000744:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8000746:	4b1a      	ldr	r3, [pc, #104]	; (80007b0 <MX_I2C1_Init+0x74>)
 8000748:	4a1b      	ldr	r2, [pc, #108]	; (80007b8 <MX_I2C1_Init+0x7c>)
 800074a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800074c:	4b18      	ldr	r3, [pc, #96]	; (80007b0 <MX_I2C1_Init+0x74>)
 800074e:	2200      	movs	r2, #0
 8000750:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000752:	4b17      	ldr	r3, [pc, #92]	; (80007b0 <MX_I2C1_Init+0x74>)
 8000754:	2201      	movs	r2, #1
 8000756:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000758:	4b15      	ldr	r3, [pc, #84]	; (80007b0 <MX_I2C1_Init+0x74>)
 800075a:	2200      	movs	r2, #0
 800075c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800075e:	4b14      	ldr	r3, [pc, #80]	; (80007b0 <MX_I2C1_Init+0x74>)
 8000760:	2200      	movs	r2, #0
 8000762:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000764:	4b12      	ldr	r3, [pc, #72]	; (80007b0 <MX_I2C1_Init+0x74>)
 8000766:	2200      	movs	r2, #0
 8000768:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <MX_I2C1_Init+0x74>)
 800076c:	2200      	movs	r2, #0
 800076e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000770:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <MX_I2C1_Init+0x74>)
 8000772:	2200      	movs	r2, #0
 8000774:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000776:	480e      	ldr	r0, [pc, #56]	; (80007b0 <MX_I2C1_Init+0x74>)
 8000778:	f001 fb16 	bl	8001da8 <HAL_I2C_Init>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000782:	f000 fa7b 	bl	8000c7c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000786:	2100      	movs	r1, #0
 8000788:	4809      	ldr	r0, [pc, #36]	; (80007b0 <MX_I2C1_Init+0x74>)
 800078a:	f001 fb9d 	bl	8001ec8 <HAL_I2CEx_ConfigAnalogFilter>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000794:	f000 fa72 	bl	8000c7c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000798:	2100      	movs	r1, #0
 800079a:	4805      	ldr	r0, [pc, #20]	; (80007b0 <MX_I2C1_Init+0x74>)
 800079c:	f001 fbdf 	bl	8001f5e <HAL_I2CEx_ConfigDigitalFilter>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007a6:	f000 fa69 	bl	8000c7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	200000c4 	.word	0x200000c4
 80007b4:	40005400 	.word	0x40005400
 80007b8:	00c0eaff 	.word	0x00c0eaff

080007bc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80007c0:	4b1b      	ldr	r3, [pc, #108]	; (8000830 <MX_I2C2_Init+0x74>)
 80007c2:	4a1c      	ldr	r2, [pc, #112]	; (8000834 <MX_I2C2_Init+0x78>)
 80007c4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00C0EAFF;
 80007c6:	4b1a      	ldr	r3, [pc, #104]	; (8000830 <MX_I2C2_Init+0x74>)
 80007c8:	4a1b      	ldr	r2, [pc, #108]	; (8000838 <MX_I2C2_Init+0x7c>)
 80007ca:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80007cc:	4b18      	ldr	r3, [pc, #96]	; (8000830 <MX_I2C2_Init+0x74>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007d2:	4b17      	ldr	r3, [pc, #92]	; (8000830 <MX_I2C2_Init+0x74>)
 80007d4:	2201      	movs	r2, #1
 80007d6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007d8:	4b15      	ldr	r3, [pc, #84]	; (8000830 <MX_I2C2_Init+0x74>)
 80007da:	2200      	movs	r2, #0
 80007dc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80007de:	4b14      	ldr	r3, [pc, #80]	; (8000830 <MX_I2C2_Init+0x74>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007e4:	4b12      	ldr	r3, [pc, #72]	; (8000830 <MX_I2C2_Init+0x74>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007ea:	4b11      	ldr	r3, [pc, #68]	; (8000830 <MX_I2C2_Init+0x74>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007f0:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <MX_I2C2_Init+0x74>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80007f6:	480e      	ldr	r0, [pc, #56]	; (8000830 <MX_I2C2_Init+0x74>)
 80007f8:	f001 fad6 	bl	8001da8 <HAL_I2C_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000802:	f000 fa3b 	bl	8000c7c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000806:	2100      	movs	r1, #0
 8000808:	4809      	ldr	r0, [pc, #36]	; (8000830 <MX_I2C2_Init+0x74>)
 800080a:	f001 fb5d 	bl	8001ec8 <HAL_I2CEx_ConfigAnalogFilter>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000814:	f000 fa32 	bl	8000c7c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000818:	2100      	movs	r1, #0
 800081a:	4805      	ldr	r0, [pc, #20]	; (8000830 <MX_I2C2_Init+0x74>)
 800081c:	f001 fb9f 	bl	8001f5e <HAL_I2CEx_ConfigDigitalFilter>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000826:	f000 fa29 	bl	8000c7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	20000134 	.word	0x20000134
 8000834:	40005800 	.word	0x40005800
 8000838:	00c0eaff 	.word	0x00c0eaff

0800083c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000840:	4b1b      	ldr	r3, [pc, #108]	; (80008b0 <MX_I2C3_Init+0x74>)
 8000842:	4a1c      	ldr	r2, [pc, #112]	; (80008b4 <MX_I2C3_Init+0x78>)
 8000844:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8000846:	4b1a      	ldr	r3, [pc, #104]	; (80008b0 <MX_I2C3_Init+0x74>)
 8000848:	4a1b      	ldr	r2, [pc, #108]	; (80008b8 <MX_I2C3_Init+0x7c>)
 800084a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800084c:	4b18      	ldr	r3, [pc, #96]	; (80008b0 <MX_I2C3_Init+0x74>)
 800084e:	2200      	movs	r2, #0
 8000850:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000852:	4b17      	ldr	r3, [pc, #92]	; (80008b0 <MX_I2C3_Init+0x74>)
 8000854:	2201      	movs	r2, #1
 8000856:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000858:	4b15      	ldr	r3, [pc, #84]	; (80008b0 <MX_I2C3_Init+0x74>)
 800085a:	2200      	movs	r2, #0
 800085c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800085e:	4b14      	ldr	r3, [pc, #80]	; (80008b0 <MX_I2C3_Init+0x74>)
 8000860:	2200      	movs	r2, #0
 8000862:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000864:	4b12      	ldr	r3, [pc, #72]	; (80008b0 <MX_I2C3_Init+0x74>)
 8000866:	2200      	movs	r2, #0
 8000868:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800086a:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <MX_I2C3_Init+0x74>)
 800086c:	2200      	movs	r2, #0
 800086e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000870:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <MX_I2C3_Init+0x74>)
 8000872:	2200      	movs	r2, #0
 8000874:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000876:	480e      	ldr	r0, [pc, #56]	; (80008b0 <MX_I2C3_Init+0x74>)
 8000878:	f001 fa96 	bl	8001da8 <HAL_I2C_Init>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000882:	f000 f9fb 	bl	8000c7c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000886:	2100      	movs	r1, #0
 8000888:	4809      	ldr	r0, [pc, #36]	; (80008b0 <MX_I2C3_Init+0x74>)
 800088a:	f001 fb1d 	bl	8001ec8 <HAL_I2CEx_ConfigAnalogFilter>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000894:	f000 f9f2 	bl	8000c7c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000898:	2100      	movs	r1, #0
 800089a:	4805      	ldr	r0, [pc, #20]	; (80008b0 <MX_I2C3_Init+0x74>)
 800089c:	f001 fb5f 	bl	8001f5e <HAL_I2CEx_ConfigDigitalFilter>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80008a6:	f000 f9e9 	bl	8000c7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	2000002c 	.word	0x2000002c
 80008b4:	40005c00 	.word	0x40005c00
 80008b8:	00c0eaff 	.word	0x00c0eaff

080008bc <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80008c0:	4b1b      	ldr	r3, [pc, #108]	; (8000930 <MX_I2C4_Init+0x74>)
 80008c2:	4a1c      	ldr	r2, [pc, #112]	; (8000934 <MX_I2C4_Init+0x78>)
 80008c4:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00C0EAFF;
 80008c6:	4b1a      	ldr	r3, [pc, #104]	; (8000930 <MX_I2C4_Init+0x74>)
 80008c8:	4a1b      	ldr	r2, [pc, #108]	; (8000938 <MX_I2C4_Init+0x7c>)
 80008ca:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80008cc:	4b18      	ldr	r3, [pc, #96]	; (8000930 <MX_I2C4_Init+0x74>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008d2:	4b17      	ldr	r3, [pc, #92]	; (8000930 <MX_I2C4_Init+0x74>)
 80008d4:	2201      	movs	r2, #1
 80008d6:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008d8:	4b15      	ldr	r3, [pc, #84]	; (8000930 <MX_I2C4_Init+0x74>)
 80008da:	2200      	movs	r2, #0
 80008dc:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80008de:	4b14      	ldr	r3, [pc, #80]	; (8000930 <MX_I2C4_Init+0x74>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008e4:	4b12      	ldr	r3, [pc, #72]	; (8000930 <MX_I2C4_Init+0x74>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008ea:	4b11      	ldr	r3, [pc, #68]	; (8000930 <MX_I2C4_Init+0x74>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008f0:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <MX_I2C4_Init+0x74>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80008f6:	480e      	ldr	r0, [pc, #56]	; (8000930 <MX_I2C4_Init+0x74>)
 80008f8:	f001 fa56 	bl	8001da8 <HAL_I2C_Init>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000902:	f000 f9bb 	bl	8000c7c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000906:	2100      	movs	r1, #0
 8000908:	4809      	ldr	r0, [pc, #36]	; (8000930 <MX_I2C4_Init+0x74>)
 800090a:	f001 fadd 	bl	8001ec8 <HAL_I2CEx_ConfigAnalogFilter>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000914:	f000 f9b2 	bl	8000c7c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000918:	2100      	movs	r1, #0
 800091a:	4805      	ldr	r0, [pc, #20]	; (8000930 <MX_I2C4_Init+0x74>)
 800091c:	f001 fb1f 	bl	8001f5e <HAL_I2CEx_ConfigDigitalFilter>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000926:	f000 f9a9 	bl	8000c7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	20000078 	.word	0x20000078
 8000934:	40006000 	.word	0x40006000
 8000938:	00c0eaff 	.word	0x00c0eaff

0800093c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b08e      	sub	sp, #56	; 0x38
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000942:	1d3b      	adds	r3, r7, #4
 8000944:	2234      	movs	r2, #52	; 0x34
 8000946:	2100      	movs	r1, #0
 8000948:	4618      	mov	r0, r3
 800094a:	f003 fcf1 	bl	8004330 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800094e:	4b3a      	ldr	r3, [pc, #232]	; (8000a38 <MX_LTDC_Init+0xfc>)
 8000950:	4a3a      	ldr	r2, [pc, #232]	; (8000a3c <MX_LTDC_Init+0x100>)
 8000952:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000954:	4b38      	ldr	r3, [pc, #224]	; (8000a38 <MX_LTDC_Init+0xfc>)
 8000956:	2200      	movs	r2, #0
 8000958:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800095a:	4b37      	ldr	r3, [pc, #220]	; (8000a38 <MX_LTDC_Init+0xfc>)
 800095c:	2200      	movs	r2, #0
 800095e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000960:	4b35      	ldr	r3, [pc, #212]	; (8000a38 <MX_LTDC_Init+0xfc>)
 8000962:	2200      	movs	r2, #0
 8000964:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000966:	4b34      	ldr	r3, [pc, #208]	; (8000a38 <MX_LTDC_Init+0xfc>)
 8000968:	2200      	movs	r2, #0
 800096a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 0;
 800096c:	4b32      	ldr	r3, [pc, #200]	; (8000a38 <MX_LTDC_Init+0xfc>)
 800096e:	2200      	movs	r2, #0
 8000970:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000972:	4b31      	ldr	r3, [pc, #196]	; (8000a38 <MX_LTDC_Init+0xfc>)
 8000974:	2209      	movs	r2, #9
 8000976:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 43;
 8000978:	4b2f      	ldr	r3, [pc, #188]	; (8000a38 <MX_LTDC_Init+0xfc>)
 800097a:	222b      	movs	r2, #43	; 0x2b
 800097c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 21;
 800097e:	4b2e      	ldr	r3, [pc, #184]	; (8000a38 <MX_LTDC_Init+0xfc>)
 8000980:	2215      	movs	r2, #21
 8000982:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 523;
 8000984:	4b2c      	ldr	r3, [pc, #176]	; (8000a38 <MX_LTDC_Init+0xfc>)
 8000986:	f240 220b 	movw	r2, #523	; 0x20b
 800098a:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 293;
 800098c:	4b2a      	ldr	r3, [pc, #168]	; (8000a38 <MX_LTDC_Init+0xfc>)
 800098e:	f240 1225 	movw	r2, #293	; 0x125
 8000992:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 531;
 8000994:	4b28      	ldr	r3, [pc, #160]	; (8000a38 <MX_LTDC_Init+0xfc>)
 8000996:	f240 2213 	movw	r2, #531	; 0x213
 800099a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 297;
 800099c:	4b26      	ldr	r3, [pc, #152]	; (8000a38 <MX_LTDC_Init+0xfc>)
 800099e:	f240 1229 	movw	r2, #297	; 0x129
 80009a2:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80009a4:	4b24      	ldr	r3, [pc, #144]	; (8000a38 <MX_LTDC_Init+0xfc>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80009ac:	4b22      	ldr	r3, [pc, #136]	; (8000a38 <MX_LTDC_Init+0xfc>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80009b4:	4b20      	ldr	r3, [pc, #128]	; (8000a38 <MX_LTDC_Init+0xfc>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80009bc:	481e      	ldr	r0, [pc, #120]	; (8000a38 <MX_LTDC_Init+0xfc>)
 80009be:	f001 fb1b 	bl	8001ff8 <HAL_LTDC_Init>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80009c8:	f000 f958 	bl	8000c7c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80009cc:	2300      	movs	r3, #0
 80009ce:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 80009d0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80009d4:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80009d6:	2300      	movs	r3, #0
 80009d8:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 80009da:	f44f 7388 	mov.w	r3, #272	; 0x110
 80009de:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80009e0:	2302      	movs	r3, #2
 80009e2:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80009e4:	23ff      	movs	r3, #255	; 0xff
 80009e6:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80009e8:	2300      	movs	r3, #0
 80009ea:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80009ec:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80009f0:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80009f2:	2307      	movs	r3, #7
 80009f4:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 80009f6:	2300      	movs	r3, #0
 80009f8:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 80009fa:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80009fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8000a00:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000a04:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000a06:	2300      	movs	r3, #0
 8000a08:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000a12:	2300      	movs	r3, #0
 8000a14:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000a18:	1d3b      	adds	r3, r7, #4
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4806      	ldr	r0, [pc, #24]	; (8000a38 <MX_LTDC_Init+0xfc>)
 8000a20:	f001 fc7c 	bl	800231c <HAL_LTDC_ConfigLayer>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_LTDC_Init+0xf2>
  {
    Error_Handler();
 8000a2a:	f000 f927 	bl	8000c7c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000a2e:	bf00      	nop
 8000a30:	3738      	adds	r7, #56	; 0x38
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	20000180 	.word	0x20000180
 8000a3c:	40016800 	.word	0x40016800

08000a40 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000a44:	4b14      	ldr	r3, [pc, #80]	; (8000a98 <MX_USART6_UART_Init+0x58>)
 8000a46:	4a15      	ldr	r2, [pc, #84]	; (8000a9c <MX_USART6_UART_Init+0x5c>)
 8000a48:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000a4a:	4b13      	ldr	r3, [pc, #76]	; (8000a98 <MX_USART6_UART_Init+0x58>)
 8000a4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a50:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000a52:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <MX_USART6_UART_Init+0x58>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000a58:	4b0f      	ldr	r3, [pc, #60]	; (8000a98 <MX_USART6_UART_Init+0x58>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	; (8000a98 <MX_USART6_UART_Init+0x58>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000a64:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <MX_USART6_UART_Init+0x58>)
 8000a66:	220c      	movs	r2, #12
 8000a68:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a6a:	4b0b      	ldr	r3, [pc, #44]	; (8000a98 <MX_USART6_UART_Init+0x58>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a70:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <MX_USART6_UART_Init+0x58>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a76:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <MX_USART6_UART_Init+0x58>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a7c:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <MX_USART6_UART_Init+0x58>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000a82:	4805      	ldr	r0, [pc, #20]	; (8000a98 <MX_USART6_UART_Init+0x58>)
 8000a84:	f002 ff3c 	bl	8003900 <HAL_UART_Init>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8000a8e:	f000 f8f5 	bl	8000c7c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	20000228 	.word	0x20000228
 8000a9c:	40011400 	.word	0x40011400

08000aa0 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b088      	sub	sp, #32
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000aa6:	1d3b      	adds	r3, r7, #4
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]
 8000ab0:	60da      	str	r2, [r3, #12]
 8000ab2:	611a      	str	r2, [r3, #16]
 8000ab4:	615a      	str	r2, [r3, #20]
 8000ab6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000ab8:	4b1f      	ldr	r3, [pc, #124]	; (8000b38 <MX_FMC_Init+0x98>)
 8000aba:	4a20      	ldr	r2, [pc, #128]	; (8000b3c <MX_FMC_Init+0x9c>)
 8000abc:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000abe:	4b1e      	ldr	r3, [pc, #120]	; (8000b38 <MX_FMC_Init+0x98>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000ac4:	4b1c      	ldr	r3, [pc, #112]	; (8000b38 <MX_FMC_Init+0x98>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000aca:	4b1b      	ldr	r3, [pc, #108]	; (8000b38 <MX_FMC_Init+0x98>)
 8000acc:	2204      	movs	r2, #4
 8000ace:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000ad0:	4b19      	ldr	r3, [pc, #100]	; (8000b38 <MX_FMC_Init+0x98>)
 8000ad2:	2210      	movs	r2, #16
 8000ad4:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000ad6:	4b18      	ldr	r3, [pc, #96]	; (8000b38 <MX_FMC_Init+0x98>)
 8000ad8:	2240      	movs	r2, #64	; 0x40
 8000ada:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000adc:	4b16      	ldr	r3, [pc, #88]	; (8000b38 <MX_FMC_Init+0x98>)
 8000ade:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000ae2:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000ae4:	4b14      	ldr	r3, [pc, #80]	; (8000b38 <MX_FMC_Init+0x98>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000aea:	4b13      	ldr	r3, [pc, #76]	; (8000b38 <MX_FMC_Init+0x98>)
 8000aec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000af0:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000af2:	4b11      	ldr	r3, [pc, #68]	; (8000b38 <MX_FMC_Init+0x98>)
 8000af4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000af8:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000afa:	4b0f      	ldr	r3, [pc, #60]	; (8000b38 <MX_FMC_Init+0x98>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000b00:	2302      	movs	r3, #2
 8000b02:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000b04:	2307      	movs	r3, #7
 8000b06:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000b08:	2304      	movs	r3, #4
 8000b0a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000b0c:	2307      	movs	r3, #7
 8000b0e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000b10:	2303      	movs	r3, #3
 8000b12:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000b14:	2302      	movs	r3, #2
 8000b16:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000b1c:	1d3b      	adds	r3, r7, #4
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4805      	ldr	r0, [pc, #20]	; (8000b38 <MX_FMC_Init+0x98>)
 8000b22:	f002 feb9 	bl	8003898 <HAL_SDRAM_Init>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000b2c:	f000 f8a6 	bl	8000c7c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000b30:	bf00      	nop
 8000b32:	3720      	adds	r7, #32
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	200002ec 	.word	0x200002ec
 8000b3c:	a0000140 	.word	0xa0000140

08000b40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b090      	sub	sp, #64	; 0x40
 8000b44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]
 8000b4e:	605a      	str	r2, [r3, #4]
 8000b50:	609a      	str	r2, [r3, #8]
 8000b52:	60da      	str	r2, [r3, #12]
 8000b54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000b56:	4b47      	ldr	r3, [pc, #284]	; (8000c74 <MX_GPIO_Init+0x134>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	4a46      	ldr	r2, [pc, #280]	; (8000c74 <MX_GPIO_Init+0x134>)
 8000b5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b60:	6313      	str	r3, [r2, #48]	; 0x30
 8000b62:	4b44      	ldr	r3, [pc, #272]	; (8000c74 <MX_GPIO_Init+0x134>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b6e:	4b41      	ldr	r3, [pc, #260]	; (8000c74 <MX_GPIO_Init+0x134>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	4a40      	ldr	r2, [pc, #256]	; (8000c74 <MX_GPIO_Init+0x134>)
 8000b74:	f043 0320 	orr.w	r3, r3, #32
 8000b78:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7a:	4b3e      	ldr	r3, [pc, #248]	; (8000c74 <MX_GPIO_Init+0x134>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	f003 0320 	and.w	r3, r3, #32
 8000b82:	627b      	str	r3, [r7, #36]	; 0x24
 8000b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b86:	4b3b      	ldr	r3, [pc, #236]	; (8000c74 <MX_GPIO_Init+0x134>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	4a3a      	ldr	r2, [pc, #232]	; (8000c74 <MX_GPIO_Init+0x134>)
 8000b8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b90:	6313      	str	r3, [r2, #48]	; 0x30
 8000b92:	4b38      	ldr	r3, [pc, #224]	; (8000c74 <MX_GPIO_Init+0x134>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b9a:	623b      	str	r3, [r7, #32]
 8000b9c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b9e:	4b35      	ldr	r3, [pc, #212]	; (8000c74 <MX_GPIO_Init+0x134>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	4a34      	ldr	r2, [pc, #208]	; (8000c74 <MX_GPIO_Init+0x134>)
 8000ba4:	f043 0304 	orr.w	r3, r3, #4
 8000ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8000baa:	4b32      	ldr	r3, [pc, #200]	; (8000c74 <MX_GPIO_Init+0x134>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	f003 0304 	and.w	r3, r3, #4
 8000bb2:	61fb      	str	r3, [r7, #28]
 8000bb4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000bb6:	4b2f      	ldr	r3, [pc, #188]	; (8000c74 <MX_GPIO_Init+0x134>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	4a2e      	ldr	r2, [pc, #184]	; (8000c74 <MX_GPIO_Init+0x134>)
 8000bbc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc2:	4b2c      	ldr	r3, [pc, #176]	; (8000c74 <MX_GPIO_Init+0x134>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000bca:	61bb      	str	r3, [r7, #24]
 8000bcc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bce:	4b29      	ldr	r3, [pc, #164]	; (8000c74 <MX_GPIO_Init+0x134>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	4a28      	ldr	r2, [pc, #160]	; (8000c74 <MX_GPIO_Init+0x134>)
 8000bd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bda:	4b26      	ldr	r3, [pc, #152]	; (8000c74 <MX_GPIO_Init+0x134>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000be2:	617b      	str	r3, [r7, #20]
 8000be4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000be6:	4b23      	ldr	r3, [pc, #140]	; (8000c74 <MX_GPIO_Init+0x134>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	4a22      	ldr	r2, [pc, #136]	; (8000c74 <MX_GPIO_Init+0x134>)
 8000bec:	f043 0310 	orr.w	r3, r3, #16
 8000bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf2:	4b20      	ldr	r3, [pc, #128]	; (8000c74 <MX_GPIO_Init+0x134>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	f003 0310 	and.w	r3, r3, #16
 8000bfa:	613b      	str	r3, [r7, #16]
 8000bfc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bfe:	4b1d      	ldr	r3, [pc, #116]	; (8000c74 <MX_GPIO_Init+0x134>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	4a1c      	ldr	r2, [pc, #112]	; (8000c74 <MX_GPIO_Init+0x134>)
 8000c04:	f043 0302 	orr.w	r3, r3, #2
 8000c08:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0a:	4b1a      	ldr	r3, [pc, #104]	; (8000c74 <MX_GPIO_Init+0x134>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	f003 0302 	and.w	r3, r3, #2
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c16:	4b17      	ldr	r3, [pc, #92]	; (8000c74 <MX_GPIO_Init+0x134>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	4a16      	ldr	r2, [pc, #88]	; (8000c74 <MX_GPIO_Init+0x134>)
 8000c1c:	f043 0308 	orr.w	r3, r3, #8
 8000c20:	6313      	str	r3, [r2, #48]	; 0x30
 8000c22:	4b14      	ldr	r3, [pc, #80]	; (8000c74 <MX_GPIO_Init+0x134>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	f003 0308 	and.w	r3, r3, #8
 8000c2a:	60bb      	str	r3, [r7, #8]
 8000c2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000c2e:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <MX_GPIO_Init+0x134>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	4a10      	ldr	r2, [pc, #64]	; (8000c74 <MX_GPIO_Init+0x134>)
 8000c34:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c38:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3a:	4b0e      	ldr	r3, [pc, #56]	; (8000c74 <MX_GPIO_Init+0x134>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c42:	607b      	str	r3, [r7, #4]
 8000c44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PD4_STATUS_LED_GPIO_Port, PD4_STATUS_LED_Pin, GPIO_PIN_RESET);
 8000c46:	2200      	movs	r2, #0
 8000c48:	2110      	movs	r1, #16
 8000c4a:	480b      	ldr	r0, [pc, #44]	; (8000c78 <MX_GPIO_Init+0x138>)
 8000c4c:	f001 f878 	bl	8001d40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD4_STATUS_LED_Pin */
  GPIO_InitStruct.Pin = PD4_STATUS_LED_Pin;
 8000c50:	2310      	movs	r3, #16
 8000c52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c54:	2301      	movs	r3, #1
 8000c56:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(PD4_STATUS_LED_GPIO_Port, &GPIO_InitStruct);
 8000c60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c64:	4619      	mov	r1, r3
 8000c66:	4804      	ldr	r0, [pc, #16]	; (8000c78 <MX_GPIO_Init+0x138>)
 8000c68:	f000 febe 	bl	80019e8 <HAL_GPIO_Init>

}
 8000c6c:	bf00      	nop
 8000c6e:	3740      	adds	r7, #64	; 0x40
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	40023800 	.word	0x40023800
 8000c78:	40020c00 	.word	0x40020c00

08000c7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c80:	b672      	cpsid	i
}
 8000c82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c84:	e7fe      	b.n	8000c84 <Error_Handler+0x8>
	...

08000c88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c8e:	4b0f      	ldr	r3, [pc, #60]	; (8000ccc <HAL_MspInit+0x44>)
 8000c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c92:	4a0e      	ldr	r2, [pc, #56]	; (8000ccc <HAL_MspInit+0x44>)
 8000c94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c98:	6413      	str	r3, [r2, #64]	; 0x40
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <HAL_MspInit+0x44>)
 8000c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ca2:	607b      	str	r3, [r7, #4]
 8000ca4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ca6:	4b09      	ldr	r3, [pc, #36]	; (8000ccc <HAL_MspInit+0x44>)
 8000ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000caa:	4a08      	ldr	r2, [pc, #32]	; (8000ccc <HAL_MspInit+0x44>)
 8000cac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cb0:	6453      	str	r3, [r2, #68]	; 0x44
 8000cb2:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <HAL_MspInit+0x44>)
 8000cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cba:	603b      	str	r3, [r7, #0]
 8000cbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	370c      	adds	r7, #12
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	40023800 	.word	0x40023800

08000cd0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b085      	sub	sp, #20
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a0a      	ldr	r2, [pc, #40]	; (8000d08 <HAL_CRC_MspInit+0x38>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d10b      	bne.n	8000cfa <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000ce2:	4b0a      	ldr	r3, [pc, #40]	; (8000d0c <HAL_CRC_MspInit+0x3c>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	4a09      	ldr	r2, [pc, #36]	; (8000d0c <HAL_CRC_MspInit+0x3c>)
 8000ce8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000cec:	6313      	str	r3, [r2, #48]	; 0x30
 8000cee:	4b07      	ldr	r3, [pc, #28]	; (8000d0c <HAL_CRC_MspInit+0x3c>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000cfa:	bf00      	nop
 8000cfc:	3714      	adds	r7, #20
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	40023000 	.word	0x40023000
 8000d0c:	40023800 	.word	0x40023800

08000d10 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a0a      	ldr	r2, [pc, #40]	; (8000d48 <HAL_DMA2D_MspInit+0x38>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d10b      	bne.n	8000d3a <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000d22:	4b0a      	ldr	r3, [pc, #40]	; (8000d4c <HAL_DMA2D_MspInit+0x3c>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	4a09      	ldr	r2, [pc, #36]	; (8000d4c <HAL_DMA2D_MspInit+0x3c>)
 8000d28:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2e:	4b07      	ldr	r3, [pc, #28]	; (8000d4c <HAL_DMA2D_MspInit+0x3c>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000d3a:	bf00      	nop
 8000d3c:	3714      	adds	r7, #20
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	4002b000 	.word	0x4002b000
 8000d4c:	40023800 	.word	0x40023800

08000d50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b090      	sub	sp, #64	; 0x40
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a5e      	ldr	r2, [pc, #376]	; (8000ee8 <HAL_I2C_MspInit+0x198>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d129      	bne.n	8000dc6 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d72:	4b5e      	ldr	r3, [pc, #376]	; (8000eec <HAL_I2C_MspInit+0x19c>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	4a5d      	ldr	r2, [pc, #372]	; (8000eec <HAL_I2C_MspInit+0x19c>)
 8000d78:	f043 0302 	orr.w	r3, r3, #2
 8000d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7e:	4b5b      	ldr	r3, [pc, #364]	; (8000eec <HAL_I2C_MspInit+0x19c>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	f003 0302 	and.w	r3, r3, #2
 8000d86:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d8a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d90:	2312      	movs	r3, #18
 8000d92:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d94:	2301      	movs	r3, #1
 8000d96:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d98:	2303      	movs	r3, #3
 8000d9a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d9c:	2304      	movs	r3, #4
 8000d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000da4:	4619      	mov	r1, r3
 8000da6:	4852      	ldr	r0, [pc, #328]	; (8000ef0 <HAL_I2C_MspInit+0x1a0>)
 8000da8:	f000 fe1e 	bl	80019e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dac:	4b4f      	ldr	r3, [pc, #316]	; (8000eec <HAL_I2C_MspInit+0x19c>)
 8000dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db0:	4a4e      	ldr	r2, [pc, #312]	; (8000eec <HAL_I2C_MspInit+0x19c>)
 8000db2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000db6:	6413      	str	r3, [r2, #64]	; 0x40
 8000db8:	4b4c      	ldr	r3, [pc, #304]	; (8000eec <HAL_I2C_MspInit+0x19c>)
 8000dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dc0:	627b      	str	r3, [r7, #36]	; 0x24
 8000dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8000dc4:	e08b      	b.n	8000ede <HAL_I2C_MspInit+0x18e>
  else if(hi2c->Instance==I2C2)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4a4a      	ldr	r2, [pc, #296]	; (8000ef4 <HAL_I2C_MspInit+0x1a4>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d129      	bne.n	8000e24 <HAL_I2C_MspInit+0xd4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd0:	4b46      	ldr	r3, [pc, #280]	; (8000eec <HAL_I2C_MspInit+0x19c>)
 8000dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd4:	4a45      	ldr	r2, [pc, #276]	; (8000eec <HAL_I2C_MspInit+0x19c>)
 8000dd6:	f043 0302 	orr.w	r3, r3, #2
 8000dda:	6313      	str	r3, [r2, #48]	; 0x30
 8000ddc:	4b43      	ldr	r3, [pc, #268]	; (8000eec <HAL_I2C_MspInit+0x19c>)
 8000dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de0:	f003 0302 	and.w	r3, r3, #2
 8000de4:	623b      	str	r3, [r7, #32]
 8000de6:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000de8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000dec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dee:	2312      	movs	r3, #18
 8000df0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000df2:	2301      	movs	r3, #1
 8000df4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df6:	2303      	movs	r3, #3
 8000df8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000dfa:	2304      	movs	r3, #4
 8000dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dfe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e02:	4619      	mov	r1, r3
 8000e04:	483a      	ldr	r0, [pc, #232]	; (8000ef0 <HAL_I2C_MspInit+0x1a0>)
 8000e06:	f000 fdef 	bl	80019e8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000e0a:	4b38      	ldr	r3, [pc, #224]	; (8000eec <HAL_I2C_MspInit+0x19c>)
 8000e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0e:	4a37      	ldr	r2, [pc, #220]	; (8000eec <HAL_I2C_MspInit+0x19c>)
 8000e10:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e14:	6413      	str	r3, [r2, #64]	; 0x40
 8000e16:	4b35      	ldr	r3, [pc, #212]	; (8000eec <HAL_I2C_MspInit+0x19c>)
 8000e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e1e:	61fb      	str	r3, [r7, #28]
 8000e20:	69fb      	ldr	r3, [r7, #28]
}
 8000e22:	e05c      	b.n	8000ede <HAL_I2C_MspInit+0x18e>
  else if(hi2c->Instance==I2C3)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a33      	ldr	r2, [pc, #204]	; (8000ef8 <HAL_I2C_MspInit+0x1a8>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d129      	bne.n	8000e82 <HAL_I2C_MspInit+0x132>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e2e:	4b2f      	ldr	r3, [pc, #188]	; (8000eec <HAL_I2C_MspInit+0x19c>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	4a2e      	ldr	r2, [pc, #184]	; (8000eec <HAL_I2C_MspInit+0x19c>)
 8000e34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e38:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3a:	4b2c      	ldr	r3, [pc, #176]	; (8000eec <HAL_I2C_MspInit+0x19c>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e42:	61bb      	str	r3, [r7, #24]
 8000e44:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000e46:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e4c:	2312      	movs	r3, #18
 8000e4e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e50:	2301      	movs	r3, #1
 8000e52:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e54:	2303      	movs	r3, #3
 8000e56:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e58:	2304      	movs	r3, #4
 8000e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000e5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e60:	4619      	mov	r1, r3
 8000e62:	4826      	ldr	r0, [pc, #152]	; (8000efc <HAL_I2C_MspInit+0x1ac>)
 8000e64:	f000 fdc0 	bl	80019e8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000e68:	4b20      	ldr	r3, [pc, #128]	; (8000eec <HAL_I2C_MspInit+0x19c>)
 8000e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6c:	4a1f      	ldr	r2, [pc, #124]	; (8000eec <HAL_I2C_MspInit+0x19c>)
 8000e6e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000e72:	6413      	str	r3, [r2, #64]	; 0x40
 8000e74:	4b1d      	ldr	r3, [pc, #116]	; (8000eec <HAL_I2C_MspInit+0x19c>)
 8000e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000e7c:	617b      	str	r3, [r7, #20]
 8000e7e:	697b      	ldr	r3, [r7, #20]
}
 8000e80:	e02d      	b.n	8000ede <HAL_I2C_MspInit+0x18e>
  else if(hi2c->Instance==I2C4)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a1e      	ldr	r2, [pc, #120]	; (8000f00 <HAL_I2C_MspInit+0x1b0>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d128      	bne.n	8000ede <HAL_I2C_MspInit+0x18e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e8c:	4b17      	ldr	r3, [pc, #92]	; (8000eec <HAL_I2C_MspInit+0x19c>)
 8000e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e90:	4a16      	ldr	r2, [pc, #88]	; (8000eec <HAL_I2C_MspInit+0x19c>)
 8000e92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e96:	6313      	str	r3, [r2, #48]	; 0x30
 8000e98:	4b14      	ldr	r3, [pc, #80]	; (8000eec <HAL_I2C_MspInit+0x19c>)
 8000e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ea0:	613b      	str	r3, [r7, #16]
 8000ea2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000ea4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000eaa:	2312      	movs	r3, #18
 8000eac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb2:	2303      	movs	r3, #3
 8000eb4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000eb6:	2304      	movs	r3, #4
 8000eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000eba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	480e      	ldr	r0, [pc, #56]	; (8000efc <HAL_I2C_MspInit+0x1ac>)
 8000ec2:	f000 fd91 	bl	80019e8 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000ec6:	4b09      	ldr	r3, [pc, #36]	; (8000eec <HAL_I2C_MspInit+0x19c>)
 8000ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eca:	4a08      	ldr	r2, [pc, #32]	; (8000eec <HAL_I2C_MspInit+0x19c>)
 8000ecc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ed0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ed2:	4b06      	ldr	r3, [pc, #24]	; (8000eec <HAL_I2C_MspInit+0x19c>)
 8000ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	68fb      	ldr	r3, [r7, #12]
}
 8000ede:	bf00      	nop
 8000ee0:	3740      	adds	r7, #64	; 0x40
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40005400 	.word	0x40005400
 8000eec:	40023800 	.word	0x40023800
 8000ef0:	40020400 	.word	0x40020400
 8000ef4:	40005800 	.word	0x40005800
 8000ef8:	40005c00 	.word	0x40005c00
 8000efc:	40021c00 	.word	0x40021c00
 8000f00:	40006000 	.word	0x40006000

08000f04 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b08c      	sub	sp, #48	; 0x30
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0c:	f107 031c 	add.w	r3, r7, #28
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	60da      	str	r2, [r3, #12]
 8000f1a:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a53      	ldr	r2, [pc, #332]	; (8001070 <HAL_LTDC_MspInit+0x16c>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	f040 80a0 	bne.w	8001068 <HAL_LTDC_MspInit+0x164>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000f28:	4b52      	ldr	r3, [pc, #328]	; (8001074 <HAL_LTDC_MspInit+0x170>)
 8000f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2c:	4a51      	ldr	r2, [pc, #324]	; (8001074 <HAL_LTDC_MspInit+0x170>)
 8000f2e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000f32:	6453      	str	r3, [r2, #68]	; 0x44
 8000f34:	4b4f      	ldr	r3, [pc, #316]	; (8001074 <HAL_LTDC_MspInit+0x170>)
 8000f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f38:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000f3c:	61bb      	str	r3, [r7, #24]
 8000f3e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8000f40:	4b4c      	ldr	r3, [pc, #304]	; (8001074 <HAL_LTDC_MspInit+0x170>)
 8000f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f44:	4a4b      	ldr	r2, [pc, #300]	; (8001074 <HAL_LTDC_MspInit+0x170>)
 8000f46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f4a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4c:	4b49      	ldr	r3, [pc, #292]	; (8001074 <HAL_LTDC_MspInit+0x170>)
 8000f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f54:	617b      	str	r3, [r7, #20]
 8000f56:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000f58:	4b46      	ldr	r3, [pc, #280]	; (8001074 <HAL_LTDC_MspInit+0x170>)
 8000f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5c:	4a45      	ldr	r2, [pc, #276]	; (8001074 <HAL_LTDC_MspInit+0x170>)
 8000f5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f62:	6313      	str	r3, [r2, #48]	; 0x30
 8000f64:	4b43      	ldr	r3, [pc, #268]	; (8001074 <HAL_LTDC_MspInit+0x170>)
 8000f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f6c:	613b      	str	r3, [r7, #16]
 8000f6e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8000f70:	4b40      	ldr	r3, [pc, #256]	; (8001074 <HAL_LTDC_MspInit+0x170>)
 8000f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f74:	4a3f      	ldr	r2, [pc, #252]	; (8001074 <HAL_LTDC_MspInit+0x170>)
 8000f76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f7a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7c:	4b3d      	ldr	r3, [pc, #244]	; (8001074 <HAL_LTDC_MspInit+0x170>)
 8000f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f84:	60fb      	str	r3, [r7, #12]
 8000f86:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f88:	4b3a      	ldr	r3, [pc, #232]	; (8001074 <HAL_LTDC_MspInit+0x170>)
 8000f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8c:	4a39      	ldr	r2, [pc, #228]	; (8001074 <HAL_LTDC_MspInit+0x170>)
 8000f8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f92:	6313      	str	r3, [r2, #48]	; 0x30
 8000f94:	4b37      	ldr	r3, [pc, #220]	; (8001074 <HAL_LTDC_MspInit+0x170>)
 8000f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f9c:	60bb      	str	r3, [r7, #8]
 8000f9e:	68bb      	ldr	r3, [r7, #8]
    PK4     ------> LTDC_B5
    PK5     ------> LTDC_B6
    PK6     ------> LTDC_B7
    PK7     ------> LTDC_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000fa0:	f44f 4364 	mov.w	r3, #58368	; 0xe400
 8000fa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000fb2:	230e      	movs	r3, #14
 8000fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000fb6:	f107 031c 	add.w	r3, r7, #28
 8000fba:	4619      	mov	r1, r3
 8000fbc:	482e      	ldr	r0, [pc, #184]	; (8001078 <HAL_LTDC_MspInit+0x174>)
 8000fbe:	f000 fd13 	bl	80019e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000fc2:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8000fc6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000fd4:	230e      	movs	r3, #14
 8000fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000fd8:	f107 031c 	add.w	r3, r7, #28
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4827      	ldr	r0, [pc, #156]	; (800107c <HAL_LTDC_MspInit+0x178>)
 8000fe0:	f000 fd02 	bl	80019e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8000fe4:	23f7      	movs	r3, #247	; 0xf7
 8000fe6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ff4:	230e      	movs	r3, #14
 8000ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000ff8:	f107 031c 	add.w	r3, r7, #28
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4820      	ldr	r0, [pc, #128]	; (8001080 <HAL_LTDC_MspInit+0x17c>)
 8001000:	f000 fcf2 	bl	80019e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001004:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001008:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100a:	2302      	movs	r3, #2
 800100c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	2300      	movs	r3, #0
 8001010:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001012:	2300      	movs	r3, #0
 8001014:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001016:	2309      	movs	r3, #9
 8001018:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800101a:	f107 031c 	add.w	r3, r7, #28
 800101e:	4619      	mov	r1, r3
 8001020:	4818      	ldr	r0, [pc, #96]	; (8001084 <HAL_LTDC_MspInit+0x180>)
 8001022:	f000 fce1 	bl	80019e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001026:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800102a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102c:	2302      	movs	r3, #2
 800102e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001034:	2300      	movs	r3, #0
 8001036:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001038:	230e      	movs	r3, #14
 800103a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800103c:	f107 031c 	add.w	r3, r7, #28
 8001040:	4619      	mov	r1, r3
 8001042:	4810      	ldr	r0, [pc, #64]	; (8001084 <HAL_LTDC_MspInit+0x180>)
 8001044:	f000 fcd0 	bl	80019e8 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8001048:	2200      	movs	r2, #0
 800104a:	2100      	movs	r1, #0
 800104c:	2058      	movs	r0, #88	; 0x58
 800104e:	f000 face 	bl	80015ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001052:	2058      	movs	r0, #88	; 0x58
 8001054:	f000 fae7 	bl	8001626 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(LTDC_ER_IRQn, 0, 0);
 8001058:	2200      	movs	r2, #0
 800105a:	2100      	movs	r1, #0
 800105c:	2059      	movs	r0, #89	; 0x59
 800105e:	f000 fac6 	bl	80015ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_ER_IRQn);
 8001062:	2059      	movs	r0, #89	; 0x59
 8001064:	f000 fadf 	bl	8001626 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001068:	bf00      	nop
 800106a:	3730      	adds	r7, #48	; 0x30
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	40016800 	.word	0x40016800
 8001074:	40023800 	.word	0x40023800
 8001078:	40022000 	.word	0x40022000
 800107c:	40022400 	.word	0x40022400
 8001080:	40022800 	.word	0x40022800
 8001084:	40021800 	.word	0x40021800

08001088 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b08a      	sub	sp, #40	; 0x28
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001090:	f107 0314 	add.w	r3, r7, #20
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	60da      	str	r2, [r3, #12]
 800109e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a17      	ldr	r2, [pc, #92]	; (8001104 <HAL_UART_MspInit+0x7c>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d127      	bne.n	80010fa <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80010aa:	4b17      	ldr	r3, [pc, #92]	; (8001108 <HAL_UART_MspInit+0x80>)
 80010ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ae:	4a16      	ldr	r2, [pc, #88]	; (8001108 <HAL_UART_MspInit+0x80>)
 80010b0:	f043 0320 	orr.w	r3, r3, #32
 80010b4:	6453      	str	r3, [r2, #68]	; 0x44
 80010b6:	4b14      	ldr	r3, [pc, #80]	; (8001108 <HAL_UART_MspInit+0x80>)
 80010b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ba:	f003 0320 	and.w	r3, r3, #32
 80010be:	613b      	str	r3, [r7, #16]
 80010c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010c2:	4b11      	ldr	r3, [pc, #68]	; (8001108 <HAL_UART_MspInit+0x80>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	4a10      	ldr	r2, [pc, #64]	; (8001108 <HAL_UART_MspInit+0x80>)
 80010c8:	f043 0304 	orr.w	r3, r3, #4
 80010cc:	6313      	str	r3, [r2, #48]	; 0x30
 80010ce:	4b0e      	ldr	r3, [pc, #56]	; (8001108 <HAL_UART_MspInit+0x80>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	f003 0304 	and.w	r3, r3, #4
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010da:	23c0      	movs	r3, #192	; 0xc0
 80010dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010de:	2302      	movs	r3, #2
 80010e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e2:	2300      	movs	r3, #0
 80010e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e6:	2303      	movs	r3, #3
 80010e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80010ea:	2308      	movs	r3, #8
 80010ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010ee:	f107 0314 	add.w	r3, r7, #20
 80010f2:	4619      	mov	r1, r3
 80010f4:	4805      	ldr	r0, [pc, #20]	; (800110c <HAL_UART_MspInit+0x84>)
 80010f6:	f000 fc77 	bl	80019e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80010fa:	bf00      	nop
 80010fc:	3728      	adds	r7, #40	; 0x28
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40011400 	.word	0x40011400
 8001108:	40023800 	.word	0x40023800
 800110c:	40020800 	.word	0x40020800

08001110 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001110:	b580      	push	{r7, lr}
 8001112:	b086      	sub	sp, #24
 8001114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001116:	1d3b      	adds	r3, r7, #4
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	60da      	str	r2, [r3, #12]
 8001122:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001124:	4b3a      	ldr	r3, [pc, #232]	; (8001210 <HAL_FMC_MspInit+0x100>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d16d      	bne.n	8001208 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 800112c:	4b38      	ldr	r3, [pc, #224]	; (8001210 <HAL_FMC_MspInit+0x100>)
 800112e:	2201      	movs	r2, #1
 8001130:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001132:	4b38      	ldr	r3, [pc, #224]	; (8001214 <HAL_FMC_MspInit+0x104>)
 8001134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001136:	4a37      	ldr	r2, [pc, #220]	; (8001214 <HAL_FMC_MspInit+0x104>)
 8001138:	f043 0301 	orr.w	r3, r3, #1
 800113c:	6393      	str	r3, [r2, #56]	; 0x38
 800113e:	4b35      	ldr	r3, [pc, #212]	; (8001214 <HAL_FMC_MspInit+0x104>)
 8001140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	603b      	str	r3, [r7, #0]
 8001148:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800114a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800114e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001150:	2302      	movs	r3, #2
 8001152:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001154:	2300      	movs	r3, #0
 8001156:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001158:	2303      	movs	r3, #3
 800115a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800115c:	230c      	movs	r3, #12
 800115e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001160:	1d3b      	adds	r3, r7, #4
 8001162:	4619      	mov	r1, r3
 8001164:	482c      	ldr	r0, [pc, #176]	; (8001218 <HAL_FMC_MspInit+0x108>)
 8001166:	f000 fc3f 	bl	80019e8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800116a:	2308      	movs	r3, #8
 800116c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116e:	2302      	movs	r3, #2
 8001170:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001172:	2300      	movs	r3, #0
 8001174:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001176:	2303      	movs	r3, #3
 8001178:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800117a:	230c      	movs	r3, #12
 800117c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800117e:	1d3b      	adds	r3, r7, #4
 8001180:	4619      	mov	r1, r3
 8001182:	4826      	ldr	r0, [pc, #152]	; (800121c <HAL_FMC_MspInit+0x10c>)
 8001184:	f000 fc30 	bl	80019e8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001188:	2328      	movs	r3, #40	; 0x28
 800118a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118c:	2302      	movs	r3, #2
 800118e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001190:	2300      	movs	r3, #0
 8001192:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001194:	2303      	movs	r3, #3
 8001196:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001198:	230c      	movs	r3, #12
 800119a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800119c:	1d3b      	adds	r3, r7, #4
 800119e:	4619      	mov	r1, r3
 80011a0:	481f      	ldr	r0, [pc, #124]	; (8001220 <HAL_FMC_MspInit+0x110>)
 80011a2:	f000 fc21 	bl	80019e8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 80011a6:	f248 1333 	movw	r3, #33075	; 0x8133
 80011aa:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ac:	2302      	movs	r3, #2
 80011ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b0:	2300      	movs	r3, #0
 80011b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b4:	2303      	movs	r3, #3
 80011b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011b8:	230c      	movs	r3, #12
 80011ba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011bc:	1d3b      	adds	r3, r7, #4
 80011be:	4619      	mov	r1, r3
 80011c0:	4818      	ldr	r0, [pc, #96]	; (8001224 <HAL_FMC_MspInit+0x114>)
 80011c2:	f000 fc11 	bl	80019e8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80011c6:	f64f 7383 	movw	r3, #65411	; 0xff83
 80011ca:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011cc:	2302      	movs	r3, #2
 80011ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d4:	2303      	movs	r3, #3
 80011d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011d8:	230c      	movs	r3, #12
 80011da:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011dc:	1d3b      	adds	r3, r7, #4
 80011de:	4619      	mov	r1, r3
 80011e0:	4811      	ldr	r0, [pc, #68]	; (8001228 <HAL_FMC_MspInit+0x118>)
 80011e2:	f000 fc01 	bl	80019e8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80011e6:	f24c 7303 	movw	r3, #50947	; 0xc703
 80011ea:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ec:	2302      	movs	r3, #2
 80011ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f4:	2303      	movs	r3, #3
 80011f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011f8:	230c      	movs	r3, #12
 80011fa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011fc:	1d3b      	adds	r3, r7, #4
 80011fe:	4619      	mov	r1, r3
 8001200:	480a      	ldr	r0, [pc, #40]	; (800122c <HAL_FMC_MspInit+0x11c>)
 8001202:	f000 fbf1 	bl	80019e8 <HAL_GPIO_Init>
 8001206:	e000      	b.n	800120a <HAL_FMC_MspInit+0xfa>
    return;
 8001208:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800120a:	3718      	adds	r7, #24
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	20000028 	.word	0x20000028
 8001214:	40023800 	.word	0x40023800
 8001218:	40021400 	.word	0x40021400
 800121c:	40020800 	.word	0x40020800
 8001220:	40021c00 	.word	0x40021c00
 8001224:	40021800 	.word	0x40021800
 8001228:	40021000 	.word	0x40021000
 800122c:	40020c00 	.word	0x40020c00

08001230 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001238:	f7ff ff6a 	bl	8001110 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800123c:	bf00      	nop
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}

08001244 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001248:	e7fe      	b.n	8001248 <NMI_Handler+0x4>

0800124a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800124e:	e7fe      	b.n	800124e <HardFault_Handler+0x4>

08001250 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001254:	e7fe      	b.n	8001254 <MemManage_Handler+0x4>

08001256 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001256:	b480      	push	{r7}
 8001258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800125a:	e7fe      	b.n	800125a <BusFault_Handler+0x4>

0800125c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001260:	e7fe      	b.n	8001260 <UsageFault_Handler+0x4>

08001262 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001262:	b480      	push	{r7}
 8001264:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001266:	bf00      	nop
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001274:	bf00      	nop
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr

0800127e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800127e:	b480      	push	{r7}
 8001280:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001282:	bf00      	nop
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001290:	f000 f88e 	bl	80013b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001294:	bf00      	nop
 8001296:	bd80      	pop	{r7, pc}

08001298 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800129c:	4802      	ldr	r0, [pc, #8]	; (80012a8 <LTDC_IRQHandler+0x10>)
 800129e:	f000 ff7b 	bl	8002198 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	20000180 	.word	0x20000180

080012ac <LTDC_ER_IRQHandler>:

/**
  * @brief This function handles LTDC global error interrupt.
  */
void LTDC_ER_IRQHandler(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_ER_IRQn 0 */

  /* USER CODE END LTDC_ER_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80012b0:	4802      	ldr	r0, [pc, #8]	; (80012bc <LTDC_ER_IRQHandler+0x10>)
 80012b2:	f000 ff71 	bl	8002198 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_ER_IRQn 1 */

  /* USER CODE END LTDC_ER_IRQn 1 */
}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	20000180 	.word	0x20000180

080012c0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012c4:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <SystemInit+0x20>)
 80012c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012ca:	4a05      	ldr	r2, [pc, #20]	; (80012e0 <SystemInit+0x20>)
 80012cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	e000ed00 	.word	0xe000ed00

080012e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80012e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800131c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012e8:	480d      	ldr	r0, [pc, #52]	; (8001320 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012ea:	490e      	ldr	r1, [pc, #56]	; (8001324 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012ec:	4a0e      	ldr	r2, [pc, #56]	; (8001328 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012f0:	e002      	b.n	80012f8 <LoopCopyDataInit>

080012f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012f6:	3304      	adds	r3, #4

080012f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012fc:	d3f9      	bcc.n	80012f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012fe:	4a0b      	ldr	r2, [pc, #44]	; (800132c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001300:	4c0b      	ldr	r4, [pc, #44]	; (8001330 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001302:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001304:	e001      	b.n	800130a <LoopFillZerobss>

08001306 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001306:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001308:	3204      	adds	r2, #4

0800130a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800130a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800130c:	d3fb      	bcc.n	8001306 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800130e:	f7ff ffd7 	bl	80012c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001312:	f002 ffe9 	bl	80042e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001316:	f7ff f8f3 	bl	8000500 <main>
  bx  lr    
 800131a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800131c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001320:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001324:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001328:	08004380 	.word	0x08004380
  ldr r2, =_sbss
 800132c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001330:	20000324 	.word	0x20000324

08001334 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001334:	e7fe      	b.n	8001334 <ADC_IRQHandler>

08001336 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800133a:	2003      	movs	r0, #3
 800133c:	f000 f94c 	bl	80015d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001340:	2000      	movs	r0, #0
 8001342:	f000 f805 	bl	8001350 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001346:	f7ff fc9f 	bl	8000c88 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800134a:	2300      	movs	r3, #0
}
 800134c:	4618      	mov	r0, r3
 800134e:	bd80      	pop	{r7, pc}

08001350 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001358:	4b12      	ldr	r3, [pc, #72]	; (80013a4 <HAL_InitTick+0x54>)
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	4b12      	ldr	r3, [pc, #72]	; (80013a8 <HAL_InitTick+0x58>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	4619      	mov	r1, r3
 8001362:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001366:	fbb3 f3f1 	udiv	r3, r3, r1
 800136a:	fbb2 f3f3 	udiv	r3, r2, r3
 800136e:	4618      	mov	r0, r3
 8001370:	f000 f967 	bl	8001642 <HAL_SYSTICK_Config>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e00e      	b.n	800139c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2b0f      	cmp	r3, #15
 8001382:	d80a      	bhi.n	800139a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001384:	2200      	movs	r2, #0
 8001386:	6879      	ldr	r1, [r7, #4]
 8001388:	f04f 30ff 	mov.w	r0, #4294967295
 800138c:	f000 f92f 	bl	80015ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001390:	4a06      	ldr	r2, [pc, #24]	; (80013ac <HAL_InitTick+0x5c>)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001396:	2300      	movs	r3, #0
 8001398:	e000      	b.n	800139c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
}
 800139c:	4618      	mov	r0, r3
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	20000000 	.word	0x20000000
 80013a8:	20000008 	.word	0x20000008
 80013ac:	20000004 	.word	0x20000004

080013b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013b4:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <HAL_IncTick+0x20>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	461a      	mov	r2, r3
 80013ba:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <HAL_IncTick+0x24>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4413      	add	r3, r2
 80013c0:	4a04      	ldr	r2, [pc, #16]	; (80013d4 <HAL_IncTick+0x24>)
 80013c2:	6013      	str	r3, [r2, #0]
}
 80013c4:	bf00      	nop
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	20000008 	.word	0x20000008
 80013d4:	20000320 	.word	0x20000320

080013d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  return uwTick;
 80013dc:	4b03      	ldr	r3, [pc, #12]	; (80013ec <HAL_GetTick+0x14>)
 80013de:	681b      	ldr	r3, [r3, #0]
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	20000320 	.word	0x20000320

080013f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013f8:	f7ff ffee 	bl	80013d8 <HAL_GetTick>
 80013fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001408:	d005      	beq.n	8001416 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800140a:	4b0a      	ldr	r3, [pc, #40]	; (8001434 <HAL_Delay+0x44>)
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	461a      	mov	r2, r3
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	4413      	add	r3, r2
 8001414:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001416:	bf00      	nop
 8001418:	f7ff ffde 	bl	80013d8 <HAL_GetTick>
 800141c:	4602      	mov	r2, r0
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	68fa      	ldr	r2, [r7, #12]
 8001424:	429a      	cmp	r2, r3
 8001426:	d8f7      	bhi.n	8001418 <HAL_Delay+0x28>
  {
  }
}
 8001428:	bf00      	nop
 800142a:	bf00      	nop
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	20000008 	.word	0x20000008

08001438 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001438:	b480      	push	{r7}
 800143a:	b085      	sub	sp, #20
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f003 0307 	and.w	r3, r3, #7
 8001446:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001448:	4b0b      	ldr	r3, [pc, #44]	; (8001478 <__NVIC_SetPriorityGrouping+0x40>)
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800144e:	68ba      	ldr	r2, [r7, #8]
 8001450:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001454:	4013      	ands	r3, r2
 8001456:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001460:	4b06      	ldr	r3, [pc, #24]	; (800147c <__NVIC_SetPriorityGrouping+0x44>)
 8001462:	4313      	orrs	r3, r2
 8001464:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001466:	4a04      	ldr	r2, [pc, #16]	; (8001478 <__NVIC_SetPriorityGrouping+0x40>)
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	60d3      	str	r3, [r2, #12]
}
 800146c:	bf00      	nop
 800146e:	3714      	adds	r7, #20
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr
 8001478:	e000ed00 	.word	0xe000ed00
 800147c:	05fa0000 	.word	0x05fa0000

08001480 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001484:	4b04      	ldr	r3, [pc, #16]	; (8001498 <__NVIC_GetPriorityGrouping+0x18>)
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	0a1b      	lsrs	r3, r3, #8
 800148a:	f003 0307 	and.w	r3, r3, #7
}
 800148e:	4618      	mov	r0, r3
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr
 8001498:	e000ed00 	.word	0xe000ed00

0800149c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	db0b      	blt.n	80014c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ae:	79fb      	ldrb	r3, [r7, #7]
 80014b0:	f003 021f 	and.w	r2, r3, #31
 80014b4:	4907      	ldr	r1, [pc, #28]	; (80014d4 <__NVIC_EnableIRQ+0x38>)
 80014b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ba:	095b      	lsrs	r3, r3, #5
 80014bc:	2001      	movs	r0, #1
 80014be:	fa00 f202 	lsl.w	r2, r0, r2
 80014c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014c6:	bf00      	nop
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	e000e100 	.word	0xe000e100

080014d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4603      	mov	r3, r0
 80014e0:	6039      	str	r1, [r7, #0]
 80014e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	db0a      	blt.n	8001502 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	b2da      	uxtb	r2, r3
 80014f0:	490c      	ldr	r1, [pc, #48]	; (8001524 <__NVIC_SetPriority+0x4c>)
 80014f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f6:	0112      	lsls	r2, r2, #4
 80014f8:	b2d2      	uxtb	r2, r2
 80014fa:	440b      	add	r3, r1
 80014fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001500:	e00a      	b.n	8001518 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	b2da      	uxtb	r2, r3
 8001506:	4908      	ldr	r1, [pc, #32]	; (8001528 <__NVIC_SetPriority+0x50>)
 8001508:	79fb      	ldrb	r3, [r7, #7]
 800150a:	f003 030f 	and.w	r3, r3, #15
 800150e:	3b04      	subs	r3, #4
 8001510:	0112      	lsls	r2, r2, #4
 8001512:	b2d2      	uxtb	r2, r2
 8001514:	440b      	add	r3, r1
 8001516:	761a      	strb	r2, [r3, #24]
}
 8001518:	bf00      	nop
 800151a:	370c      	adds	r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr
 8001524:	e000e100 	.word	0xe000e100
 8001528:	e000ed00 	.word	0xe000ed00

0800152c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800152c:	b480      	push	{r7}
 800152e:	b089      	sub	sp, #36	; 0x24
 8001530:	af00      	add	r7, sp, #0
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	60b9      	str	r1, [r7, #8]
 8001536:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	f003 0307 	and.w	r3, r3, #7
 800153e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	f1c3 0307 	rsb	r3, r3, #7
 8001546:	2b04      	cmp	r3, #4
 8001548:	bf28      	it	cs
 800154a:	2304      	movcs	r3, #4
 800154c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	3304      	adds	r3, #4
 8001552:	2b06      	cmp	r3, #6
 8001554:	d902      	bls.n	800155c <NVIC_EncodePriority+0x30>
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	3b03      	subs	r3, #3
 800155a:	e000      	b.n	800155e <NVIC_EncodePriority+0x32>
 800155c:	2300      	movs	r3, #0
 800155e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001560:	f04f 32ff 	mov.w	r2, #4294967295
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	fa02 f303 	lsl.w	r3, r2, r3
 800156a:	43da      	mvns	r2, r3
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	401a      	ands	r2, r3
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001574:	f04f 31ff 	mov.w	r1, #4294967295
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	fa01 f303 	lsl.w	r3, r1, r3
 800157e:	43d9      	mvns	r1, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001584:	4313      	orrs	r3, r2
         );
}
 8001586:	4618      	mov	r0, r3
 8001588:	3724      	adds	r7, #36	; 0x24
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
	...

08001594 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	3b01      	subs	r3, #1
 80015a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015a4:	d301      	bcc.n	80015aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015a6:	2301      	movs	r3, #1
 80015a8:	e00f      	b.n	80015ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015aa:	4a0a      	ldr	r2, [pc, #40]	; (80015d4 <SysTick_Config+0x40>)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	3b01      	subs	r3, #1
 80015b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015b2:	210f      	movs	r1, #15
 80015b4:	f04f 30ff 	mov.w	r0, #4294967295
 80015b8:	f7ff ff8e 	bl	80014d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015bc:	4b05      	ldr	r3, [pc, #20]	; (80015d4 <SysTick_Config+0x40>)
 80015be:	2200      	movs	r2, #0
 80015c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015c2:	4b04      	ldr	r3, [pc, #16]	; (80015d4 <SysTick_Config+0x40>)
 80015c4:	2207      	movs	r2, #7
 80015c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	e000e010 	.word	0xe000e010

080015d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f7ff ff29 	bl	8001438 <__NVIC_SetPriorityGrouping>
}
 80015e6:	bf00      	nop
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b086      	sub	sp, #24
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	4603      	mov	r3, r0
 80015f6:	60b9      	str	r1, [r7, #8]
 80015f8:	607a      	str	r2, [r7, #4]
 80015fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80015fc:	2300      	movs	r3, #0
 80015fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001600:	f7ff ff3e 	bl	8001480 <__NVIC_GetPriorityGrouping>
 8001604:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	68b9      	ldr	r1, [r7, #8]
 800160a:	6978      	ldr	r0, [r7, #20]
 800160c:	f7ff ff8e 	bl	800152c <NVIC_EncodePriority>
 8001610:	4602      	mov	r2, r0
 8001612:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001616:	4611      	mov	r1, r2
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff ff5d 	bl	80014d8 <__NVIC_SetPriority>
}
 800161e:	bf00      	nop
 8001620:	3718      	adds	r7, #24
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b082      	sub	sp, #8
 800162a:	af00      	add	r7, sp, #0
 800162c:	4603      	mov	r3, r0
 800162e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff ff31 	bl	800149c <__NVIC_EnableIRQ>
}
 800163a:	bf00      	nop
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}

08001642 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001642:	b580      	push	{r7, lr}
 8001644:	b082      	sub	sp, #8
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f7ff ffa2 	bl	8001594 <SysTick_Config>
 8001650:	4603      	mov	r3, r0
}
 8001652:	4618      	mov	r0, r3
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
	...

0800165c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d101      	bne.n	800166e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e054      	b.n	8001718 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	7f5b      	ldrb	r3, [r3, #29]
 8001672:	b2db      	uxtb	r3, r3
 8001674:	2b00      	cmp	r3, #0
 8001676:	d105      	bne.n	8001684 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2200      	movs	r2, #0
 800167c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f7ff fb26 	bl	8000cd0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2202      	movs	r2, #2
 8001688:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	791b      	ldrb	r3, [r3, #4]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d10c      	bne.n	80016ac <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a22      	ldr	r2, [pc, #136]	; (8001720 <HAL_CRC_Init+0xc4>)
 8001698:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	689a      	ldr	r2, [r3, #8]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f022 0218 	bic.w	r2, r2, #24
 80016a8:	609a      	str	r2, [r3, #8]
 80016aa:	e00c      	b.n	80016c6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6899      	ldr	r1, [r3, #8]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	461a      	mov	r2, r3
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f000 f834 	bl	8001724 <HAL_CRCEx_Polynomial_Set>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e028      	b.n	8001718 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	795b      	ldrb	r3, [r3, #5]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d105      	bne.n	80016da <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f04f 32ff 	mov.w	r2, #4294967295
 80016d6:	611a      	str	r2, [r3, #16]
 80016d8:	e004      	b.n	80016e4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	6912      	ldr	r2, [r2, #16]
 80016e2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	695a      	ldr	r2, [r3, #20]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	430a      	orrs	r2, r1
 80016f8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	699a      	ldr	r2, [r3, #24]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	430a      	orrs	r2, r1
 800170e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2201      	movs	r2, #1
 8001714:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001716:	2300      	movs	r3, #0
}
 8001718:	4618      	mov	r0, r3
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	04c11db7 	.word	0x04c11db7

08001724 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001724:	b480      	push	{r7}
 8001726:	b087      	sub	sp, #28
 8001728:	af00      	add	r7, sp, #0
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	60b9      	str	r1, [r7, #8]
 800172e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001730:	2300      	movs	r3, #0
 8001732:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001734:	231f      	movs	r3, #31
 8001736:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001738:	bf00      	nop
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	1e5a      	subs	r2, r3, #1
 800173e:	613a      	str	r2, [r7, #16]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d009      	beq.n	8001758 <HAL_CRCEx_Polynomial_Set+0x34>
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	f003 031f 	and.w	r3, r3, #31
 800174a:	68ba      	ldr	r2, [r7, #8]
 800174c:	fa22 f303 	lsr.w	r3, r2, r3
 8001750:	f003 0301 	and.w	r3, r3, #1
 8001754:	2b00      	cmp	r3, #0
 8001756:	d0f0      	beq.n	800173a <HAL_CRCEx_Polynomial_Set+0x16>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2b18      	cmp	r3, #24
 800175c:	d846      	bhi.n	80017ec <HAL_CRCEx_Polynomial_Set+0xc8>
 800175e:	a201      	add	r2, pc, #4	; (adr r2, 8001764 <HAL_CRCEx_Polynomial_Set+0x40>)
 8001760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001764:	080017f3 	.word	0x080017f3
 8001768:	080017ed 	.word	0x080017ed
 800176c:	080017ed 	.word	0x080017ed
 8001770:	080017ed 	.word	0x080017ed
 8001774:	080017ed 	.word	0x080017ed
 8001778:	080017ed 	.word	0x080017ed
 800177c:	080017ed 	.word	0x080017ed
 8001780:	080017ed 	.word	0x080017ed
 8001784:	080017e1 	.word	0x080017e1
 8001788:	080017ed 	.word	0x080017ed
 800178c:	080017ed 	.word	0x080017ed
 8001790:	080017ed 	.word	0x080017ed
 8001794:	080017ed 	.word	0x080017ed
 8001798:	080017ed 	.word	0x080017ed
 800179c:	080017ed 	.word	0x080017ed
 80017a0:	080017ed 	.word	0x080017ed
 80017a4:	080017d5 	.word	0x080017d5
 80017a8:	080017ed 	.word	0x080017ed
 80017ac:	080017ed 	.word	0x080017ed
 80017b0:	080017ed 	.word	0x080017ed
 80017b4:	080017ed 	.word	0x080017ed
 80017b8:	080017ed 	.word	0x080017ed
 80017bc:	080017ed 	.word	0x080017ed
 80017c0:	080017ed 	.word	0x080017ed
 80017c4:	080017c9 	.word	0x080017c9
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	2b06      	cmp	r3, #6
 80017cc:	d913      	bls.n	80017f6 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80017d2:	e010      	b.n	80017f6 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	2b07      	cmp	r3, #7
 80017d8:	d90f      	bls.n	80017fa <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80017de:	e00c      	b.n	80017fa <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	2b0f      	cmp	r3, #15
 80017e4:	d90b      	bls.n	80017fe <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80017ea:	e008      	b.n	80017fe <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	75fb      	strb	r3, [r7, #23]
      break;
 80017f0:	e006      	b.n	8001800 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80017f2:	bf00      	nop
 80017f4:	e004      	b.n	8001800 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80017f6:	bf00      	nop
 80017f8:	e002      	b.n	8001800 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80017fa:	bf00      	nop
 80017fc:	e000      	b.n	8001800 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80017fe:	bf00      	nop
  }
  if (status == HAL_OK)
 8001800:	7dfb      	ldrb	r3, [r7, #23]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d10d      	bne.n	8001822 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	68ba      	ldr	r2, [r7, #8]
 800180c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	f023 0118 	bic.w	r1, r3, #24
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	430a      	orrs	r2, r1
 8001820:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001822:	7dfb      	ldrb	r3, [r7, #23]
}
 8001824:	4618      	mov	r0, r3
 8001826:	371c      	adds	r7, #28
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d101      	bne.n	8001842 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e039      	b.n	80018b6 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001848:	b2db      	uxtb	r3, r3
 800184a:	2b00      	cmp	r3, #0
 800184c:	d106      	bne.n	800185c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2200      	movs	r2, #0
 8001852:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f7ff fa5a 	bl	8000d10 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2202      	movs	r2, #2
 8001860:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	685a      	ldr	r2, [r3, #4]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	430a      	orrs	r2, r1
 8001878:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001880:	f023 0107 	bic.w	r1, r3, #7
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	689a      	ldr	r2, [r3, #8]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	430a      	orrs	r2, r1
 800188e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001896:	4b0a      	ldr	r3, [pc, #40]	; (80018c0 <HAL_DMA2D_Init+0x90>)
 8001898:	4013      	ands	r3, r2
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	68d1      	ldr	r1, [r2, #12]
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	6812      	ldr	r2, [r2, #0]
 80018a2:	430b      	orrs	r3, r1
 80018a4:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2200      	movs	r2, #0
 80018aa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2201      	movs	r2, #1
 80018b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80018b4:	2300      	movs	r3, #0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	ffffc000 	.word	0xffffc000

080018c4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b087      	sub	sp, #28
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d101      	bne.n	80018e4 <HAL_DMA2D_ConfigLayer+0x20>
 80018e0:	2302      	movs	r3, #2
 80018e2:	e079      	b.n	80019d8 <HAL_DMA2D_ConfigLayer+0x114>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2201      	movs	r2, #1
 80018e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2202      	movs	r2, #2
 80018f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	011b      	lsls	r3, r3, #4
 80018f8:	3318      	adds	r3, #24
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	4413      	add	r3, r2
 80018fe:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	685a      	ldr	r2, [r3, #4]
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	041b      	lsls	r3, r3, #16
 800190a:	4313      	orrs	r3, r2
 800190c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800190e:	4b35      	ldr	r3, [pc, #212]	; (80019e4 <HAL_DMA2D_ConfigLayer+0x120>)
 8001910:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	2b0a      	cmp	r3, #10
 8001918:	d003      	beq.n	8001922 <HAL_DMA2D_ConfigLayer+0x5e>
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	2b09      	cmp	r3, #9
 8001920:	d107      	bne.n	8001932 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	68db      	ldr	r3, [r3, #12]
 8001926:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800192a:	697a      	ldr	r2, [r7, #20]
 800192c:	4313      	orrs	r3, r2
 800192e:	617b      	str	r3, [r7, #20]
 8001930:	e005      	b.n	800193e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	061b      	lsls	r3, r3, #24
 8001938:	697a      	ldr	r2, [r7, #20]
 800193a:	4313      	orrs	r3, r2
 800193c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d120      	bne.n	8001986 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	43db      	mvns	r3, r3
 800194e:	ea02 0103 	and.w	r1, r2, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	697a      	ldr	r2, [r7, #20]
 8001958:	430a      	orrs	r2, r1
 800195a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	693a      	ldr	r2, [r7, #16]
 8001962:	6812      	ldr	r2, [r2, #0]
 8001964:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	2b0a      	cmp	r3, #10
 800196c:	d003      	beq.n	8001976 <HAL_DMA2D_ConfigLayer+0xb2>
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	2b09      	cmp	r3, #9
 8001974:	d127      	bne.n	80019c6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	68da      	ldr	r2, [r3, #12]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001982:	629a      	str	r2, [r3, #40]	; 0x28
 8001984:	e01f      	b.n	80019c6 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	69da      	ldr	r2, [r3, #28]
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	43db      	mvns	r3, r3
 8001990:	ea02 0103 	and.w	r1, r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	697a      	ldr	r2, [r7, #20]
 800199a:	430a      	orrs	r2, r1
 800199c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	693a      	ldr	r2, [r7, #16]
 80019a4:	6812      	ldr	r2, [r2, #0]
 80019a6:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	2b0a      	cmp	r3, #10
 80019ae:	d003      	beq.n	80019b8 <HAL_DMA2D_ConfigLayer+0xf4>
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	2b09      	cmp	r3, #9
 80019b6:	d106      	bne.n	80019c6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	68da      	ldr	r2, [r3, #12]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80019c4:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2201      	movs	r2, #1
 80019ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2200      	movs	r2, #0
 80019d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80019d6:	2300      	movs	r3, #0
}
 80019d8:	4618      	mov	r0, r3
 80019da:	371c      	adds	r7, #28
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr
 80019e4:	ff03000f 	.word	0xff03000f

080019e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b089      	sub	sp, #36	; 0x24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80019f2:	2300      	movs	r3, #0
 80019f4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80019f6:	2300      	movs	r3, #0
 80019f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80019fa:	2300      	movs	r3, #0
 80019fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80019fe:	2300      	movs	r3, #0
 8001a00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001a02:	2300      	movs	r3, #0
 8001a04:	61fb      	str	r3, [r7, #28]
 8001a06:	e175      	b.n	8001cf4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001a08:	2201      	movs	r2, #1
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	697a      	ldr	r2, [r7, #20]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a1c:	693a      	ldr	r2, [r7, #16]
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	f040 8164 	bne.w	8001cee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d00b      	beq.n	8001a46 <HAL_GPIO_Init+0x5e>
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d007      	beq.n	8001a46 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a3a:	2b11      	cmp	r3, #17
 8001a3c:	d003      	beq.n	8001a46 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	2b12      	cmp	r3, #18
 8001a44:	d130      	bne.n	8001aa8 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	2203      	movs	r2, #3
 8001a52:	fa02 f303 	lsl.w	r3, r2, r3
 8001a56:	43db      	mvns	r3, r3
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	68da      	ldr	r2, [r3, #12]
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	43db      	mvns	r3, r3
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	091b      	lsrs	r3, r3, #4
 8001a92:	f003 0201 	and.w	r2, r3, #1
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	2203      	movs	r2, #3
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	4013      	ands	r3, r2
 8001abe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	689a      	ldr	r2, [r3, #8]
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	005b      	lsls	r3, r3, #1
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d003      	beq.n	8001ae8 <HAL_GPIO_Init+0x100>
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	2b12      	cmp	r3, #18
 8001ae6:	d123      	bne.n	8001b30 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	08da      	lsrs	r2, r3, #3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	3208      	adds	r2, #8
 8001af0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001af4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	f003 0307 	and.w	r3, r3, #7
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	220f      	movs	r2, #15
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	43db      	mvns	r3, r3
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	691a      	ldr	r2, [r3, #16]
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	f003 0307 	and.w	r3, r3, #7
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	08da      	lsrs	r2, r3, #3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	3208      	adds	r2, #8
 8001b2a:	69b9      	ldr	r1, [r7, #24]
 8001b2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	2203      	movs	r2, #3
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	43db      	mvns	r3, r3
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	4013      	ands	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f003 0203 	and.w	r2, r3, #3
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	f000 80be 	beq.w	8001cee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b72:	4b66      	ldr	r3, [pc, #408]	; (8001d0c <HAL_GPIO_Init+0x324>)
 8001b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b76:	4a65      	ldr	r2, [pc, #404]	; (8001d0c <HAL_GPIO_Init+0x324>)
 8001b78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b7e:	4b63      	ldr	r3, [pc, #396]	; (8001d0c <HAL_GPIO_Init+0x324>)
 8001b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001b8a:	4a61      	ldr	r2, [pc, #388]	; (8001d10 <HAL_GPIO_Init+0x328>)
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	089b      	lsrs	r3, r3, #2
 8001b90:	3302      	adds	r3, #2
 8001b92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b96:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	f003 0303 	and.w	r3, r3, #3
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	220f      	movs	r2, #15
 8001ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba6:	43db      	mvns	r3, r3
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	4013      	ands	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a58      	ldr	r2, [pc, #352]	; (8001d14 <HAL_GPIO_Init+0x32c>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d037      	beq.n	8001c26 <HAL_GPIO_Init+0x23e>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a57      	ldr	r2, [pc, #348]	; (8001d18 <HAL_GPIO_Init+0x330>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d031      	beq.n	8001c22 <HAL_GPIO_Init+0x23a>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a56      	ldr	r2, [pc, #344]	; (8001d1c <HAL_GPIO_Init+0x334>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d02b      	beq.n	8001c1e <HAL_GPIO_Init+0x236>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a55      	ldr	r2, [pc, #340]	; (8001d20 <HAL_GPIO_Init+0x338>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d025      	beq.n	8001c1a <HAL_GPIO_Init+0x232>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a54      	ldr	r2, [pc, #336]	; (8001d24 <HAL_GPIO_Init+0x33c>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d01f      	beq.n	8001c16 <HAL_GPIO_Init+0x22e>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a53      	ldr	r2, [pc, #332]	; (8001d28 <HAL_GPIO_Init+0x340>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d019      	beq.n	8001c12 <HAL_GPIO_Init+0x22a>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a52      	ldr	r2, [pc, #328]	; (8001d2c <HAL_GPIO_Init+0x344>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d013      	beq.n	8001c0e <HAL_GPIO_Init+0x226>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a51      	ldr	r2, [pc, #324]	; (8001d30 <HAL_GPIO_Init+0x348>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d00d      	beq.n	8001c0a <HAL_GPIO_Init+0x222>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a50      	ldr	r2, [pc, #320]	; (8001d34 <HAL_GPIO_Init+0x34c>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d007      	beq.n	8001c06 <HAL_GPIO_Init+0x21e>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a4f      	ldr	r2, [pc, #316]	; (8001d38 <HAL_GPIO_Init+0x350>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d101      	bne.n	8001c02 <HAL_GPIO_Init+0x21a>
 8001bfe:	2309      	movs	r3, #9
 8001c00:	e012      	b.n	8001c28 <HAL_GPIO_Init+0x240>
 8001c02:	230a      	movs	r3, #10
 8001c04:	e010      	b.n	8001c28 <HAL_GPIO_Init+0x240>
 8001c06:	2308      	movs	r3, #8
 8001c08:	e00e      	b.n	8001c28 <HAL_GPIO_Init+0x240>
 8001c0a:	2307      	movs	r3, #7
 8001c0c:	e00c      	b.n	8001c28 <HAL_GPIO_Init+0x240>
 8001c0e:	2306      	movs	r3, #6
 8001c10:	e00a      	b.n	8001c28 <HAL_GPIO_Init+0x240>
 8001c12:	2305      	movs	r3, #5
 8001c14:	e008      	b.n	8001c28 <HAL_GPIO_Init+0x240>
 8001c16:	2304      	movs	r3, #4
 8001c18:	e006      	b.n	8001c28 <HAL_GPIO_Init+0x240>
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e004      	b.n	8001c28 <HAL_GPIO_Init+0x240>
 8001c1e:	2302      	movs	r3, #2
 8001c20:	e002      	b.n	8001c28 <HAL_GPIO_Init+0x240>
 8001c22:	2301      	movs	r3, #1
 8001c24:	e000      	b.n	8001c28 <HAL_GPIO_Init+0x240>
 8001c26:	2300      	movs	r3, #0
 8001c28:	69fa      	ldr	r2, [r7, #28]
 8001c2a:	f002 0203 	and.w	r2, r2, #3
 8001c2e:	0092      	lsls	r2, r2, #2
 8001c30:	4093      	lsls	r3, r2
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001c38:	4935      	ldr	r1, [pc, #212]	; (8001d10 <HAL_GPIO_Init+0x328>)
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	089b      	lsrs	r3, r3, #2
 8001c3e:	3302      	adds	r3, #2
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c46:	4b3d      	ldr	r3, [pc, #244]	; (8001d3c <HAL_GPIO_Init+0x354>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	43db      	mvns	r3, r3
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	4013      	ands	r3, r2
 8001c54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d003      	beq.n	8001c6a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c6a:	4a34      	ldr	r2, [pc, #208]	; (8001d3c <HAL_GPIO_Init+0x354>)
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c70:	4b32      	ldr	r3, [pc, #200]	; (8001d3c <HAL_GPIO_Init+0x354>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d003      	beq.n	8001c94 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c94:	4a29      	ldr	r2, [pc, #164]	; (8001d3c <HAL_GPIO_Init+0x354>)
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c9a:	4b28      	ldr	r3, [pc, #160]	; (8001d3c <HAL_GPIO_Init+0x354>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	43db      	mvns	r3, r3
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d003      	beq.n	8001cbe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cbe:	4a1f      	ldr	r2, [pc, #124]	; (8001d3c <HAL_GPIO_Init+0x354>)
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cc4:	4b1d      	ldr	r3, [pc, #116]	; (8001d3c <HAL_GPIO_Init+0x354>)
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d003      	beq.n	8001ce8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ce8:	4a14      	ldr	r2, [pc, #80]	; (8001d3c <HAL_GPIO_Init+0x354>)
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	61fb      	str	r3, [r7, #28]
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	2b0f      	cmp	r3, #15
 8001cf8:	f67f ae86 	bls.w	8001a08 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001cfc:	bf00      	nop
 8001cfe:	bf00      	nop
 8001d00:	3724      	adds	r7, #36	; 0x24
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	40023800 	.word	0x40023800
 8001d10:	40013800 	.word	0x40013800
 8001d14:	40020000 	.word	0x40020000
 8001d18:	40020400 	.word	0x40020400
 8001d1c:	40020800 	.word	0x40020800
 8001d20:	40020c00 	.word	0x40020c00
 8001d24:	40021000 	.word	0x40021000
 8001d28:	40021400 	.word	0x40021400
 8001d2c:	40021800 	.word	0x40021800
 8001d30:	40021c00 	.word	0x40021c00
 8001d34:	40022000 	.word	0x40022000
 8001d38:	40022400 	.word	0x40022400
 8001d3c:	40013c00 	.word	0x40013c00

08001d40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	460b      	mov	r3, r1
 8001d4a:	807b      	strh	r3, [r7, #2]
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d50:	787b      	ldrb	r3, [r7, #1]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d003      	beq.n	8001d5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d56:	887a      	ldrh	r2, [r7, #2]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001d5c:	e003      	b.n	8001d66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001d5e:	887b      	ldrh	r3, [r7, #2]
 8001d60:	041a      	lsls	r2, r3, #16
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	619a      	str	r2, [r3, #24]
}
 8001d66:	bf00      	nop
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr

08001d72 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d72:	b480      	push	{r7}
 8001d74:	b085      	sub	sp, #20
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	695b      	ldr	r3, [r3, #20]
 8001d82:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d84:	887a      	ldrh	r2, [r7, #2]
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	041a      	lsls	r2, r3, #16
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	43d9      	mvns	r1, r3
 8001d90:	887b      	ldrh	r3, [r7, #2]
 8001d92:	400b      	ands	r3, r1
 8001d94:	431a      	orrs	r2, r3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	619a      	str	r2, [r3, #24]
}
 8001d9a:	bf00      	nop
 8001d9c:	3714      	adds	r7, #20
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
	...

08001da8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d101      	bne.n	8001dba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e07f      	b.n	8001eba <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d106      	bne.n	8001dd4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f7fe ffbe 	bl	8000d50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2224      	movs	r2, #36	; 0x24
 8001dd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f022 0201 	bic.w	r2, r2, #1
 8001dea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685a      	ldr	r2, [r3, #4]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001df8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	689a      	ldr	r2, [r3, #8]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e08:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d107      	bne.n	8001e22 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	689a      	ldr	r2, [r3, #8]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e1e:	609a      	str	r2, [r3, #8]
 8001e20:	e006      	b.n	8001e30 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	689a      	ldr	r2, [r3, #8]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001e2e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d104      	bne.n	8001e42 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e40:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	6859      	ldr	r1, [r3, #4]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	4b1d      	ldr	r3, [pc, #116]	; (8001ec4 <HAL_I2C_Init+0x11c>)
 8001e4e:	430b      	orrs	r3, r1
 8001e50:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	68da      	ldr	r2, [r3, #12]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e60:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	691a      	ldr	r2, [r3, #16]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	695b      	ldr	r3, [r3, #20]
 8001e6a:	ea42 0103 	orr.w	r1, r2, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	699b      	ldr	r3, [r3, #24]
 8001e72:	021a      	lsls	r2, r3, #8
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	69d9      	ldr	r1, [r3, #28]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6a1a      	ldr	r2, [r3, #32]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f042 0201 	orr.w	r2, r2, #1
 8001e9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2220      	movs	r2, #32
 8001ea6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	02008000 	.word	0x02008000

08001ec8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	2b20      	cmp	r3, #32
 8001edc:	d138      	bne.n	8001f50 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d101      	bne.n	8001eec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001ee8:	2302      	movs	r3, #2
 8001eea:	e032      	b.n	8001f52 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2224      	movs	r2, #36	; 0x24
 8001ef8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f022 0201 	bic.w	r2, r2, #1
 8001f0a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f1a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	6819      	ldr	r1, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	683a      	ldr	r2, [r7, #0]
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f042 0201 	orr.w	r2, r2, #1
 8001f3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2220      	movs	r2, #32
 8001f40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	e000      	b.n	8001f52 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001f50:	2302      	movs	r3, #2
  }
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr

08001f5e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	b085      	sub	sp, #20
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
 8001f66:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	2b20      	cmp	r3, #32
 8001f72:	d139      	bne.n	8001fe8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d101      	bne.n	8001f82 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001f7e:	2302      	movs	r3, #2
 8001f80:	e033      	b.n	8001fea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2201      	movs	r2, #1
 8001f86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2224      	movs	r2, #36	; 0x24
 8001f8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f022 0201 	bic.w	r2, r2, #1
 8001fa0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001fb0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	021b      	lsls	r3, r3, #8
 8001fb6:	68fa      	ldr	r2, [r7, #12]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	68fa      	ldr	r2, [r7, #12]
 8001fc2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f042 0201 	orr.w	r2, r2, #1
 8001fd2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2220      	movs	r2, #32
 8001fd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	e000      	b.n	8001fea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001fe8:	2302      	movs	r3, #2
  }
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3714      	adds	r7, #20
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
	...

08001ff8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d101      	bne.n	800200a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e0bf      	b.n	800218a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2b00      	cmp	r3, #0
 8002014:	d106      	bne.n	8002024 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f7fe ff70 	bl	8000f04 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2202      	movs	r2, #2
 8002028:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	699a      	ldr	r2, [r3, #24]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800203a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	6999      	ldr	r1, [r3, #24]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685a      	ldr	r2, [r3, #4]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002050:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	430a      	orrs	r2, r1
 800205e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	6899      	ldr	r1, [r3, #8]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	4b4a      	ldr	r3, [pc, #296]	; (8002194 <HAL_LTDC_Init+0x19c>)
 800206c:	400b      	ands	r3, r1
 800206e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	695b      	ldr	r3, [r3, #20]
 8002074:	041b      	lsls	r3, r3, #16
 8002076:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	6899      	ldr	r1, [r3, #8]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	699a      	ldr	r2, [r3, #24]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	431a      	orrs	r2, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	430a      	orrs	r2, r1
 800208c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	68d9      	ldr	r1, [r3, #12]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	4b3e      	ldr	r3, [pc, #248]	; (8002194 <HAL_LTDC_Init+0x19c>)
 800209a:	400b      	ands	r3, r1
 800209c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	69db      	ldr	r3, [r3, #28]
 80020a2:	041b      	lsls	r3, r3, #16
 80020a4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	68d9      	ldr	r1, [r3, #12]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a1a      	ldr	r2, [r3, #32]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	431a      	orrs	r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	430a      	orrs	r2, r1
 80020ba:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	6919      	ldr	r1, [r3, #16]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	4b33      	ldr	r3, [pc, #204]	; (8002194 <HAL_LTDC_Init+0x19c>)
 80020c8:	400b      	ands	r3, r1
 80020ca:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d0:	041b      	lsls	r3, r3, #16
 80020d2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	6919      	ldr	r1, [r3, #16]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	431a      	orrs	r2, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	430a      	orrs	r2, r1
 80020e8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	6959      	ldr	r1, [r3, #20]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	4b27      	ldr	r3, [pc, #156]	; (8002194 <HAL_LTDC_Init+0x19c>)
 80020f6:	400b      	ands	r3, r1
 80020f8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020fe:	041b      	lsls	r3, r3, #16
 8002100:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	6959      	ldr	r1, [r3, #20]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	431a      	orrs	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	430a      	orrs	r2, r1
 8002116:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800211e:	021b      	lsls	r3, r3, #8
 8002120:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002128:	041b      	lsls	r3, r3, #16
 800212a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800213a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002142:	68ba      	ldr	r2, [r7, #8]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	4313      	orrs	r3, r2
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800214e:	431a      	orrs	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	430a      	orrs	r2, r1
 8002156:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f042 0206 	orr.w	r2, r2, #6
 8002166:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	699a      	ldr	r2, [r3, #24]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f042 0201 	orr.w	r2, r2, #1
 8002176:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2201      	movs	r2, #1
 8002184:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3710      	adds	r7, #16
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	f000f800 	.word	0xf000f800

08002198 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021a6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021ae:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f003 0304 	and.w	r3, r3, #4
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d023      	beq.n	8002202 <HAL_LTDC_IRQHandler+0x6a>
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	f003 0304 	and.w	r3, r3, #4
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d01e      	beq.n	8002202 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f022 0204 	bic.w	r2, r2, #4
 80021d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2204      	movs	r2, #4
 80021da:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80021e2:	f043 0201 	orr.w	r2, r3, #1
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2204      	movs	r2, #4
 80021f0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f000 f86f 	bl	80022e0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	f003 0302 	and.w	r3, r3, #2
 8002208:	2b00      	cmp	r3, #0
 800220a:	d023      	beq.n	8002254 <HAL_LTDC_IRQHandler+0xbc>
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	2b00      	cmp	r3, #0
 8002214:	d01e      	beq.n	8002254 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f022 0202 	bic.w	r2, r2, #2
 8002224:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2202      	movs	r2, #2
 800222c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002234:	f043 0202 	orr.w	r2, r3, #2
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2204      	movs	r2, #4
 8002242:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f000 f846 	bl	80022e0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f003 0301 	and.w	r3, r3, #1
 800225a:	2b00      	cmp	r3, #0
 800225c:	d01b      	beq.n	8002296 <HAL_LTDC_IRQHandler+0xfe>
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	f003 0301 	and.w	r3, r3, #1
 8002264:	2b00      	cmp	r3, #0
 8002266:	d016      	beq.n	8002296 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f022 0201 	bic.w	r2, r2, #1
 8002276:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2201      	movs	r2, #1
 800227e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f000 f82f 	bl	80022f4 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f003 0308 	and.w	r3, r3, #8
 800229c:	2b00      	cmp	r3, #0
 800229e:	d01b      	beq.n	80022d8 <HAL_LTDC_IRQHandler+0x140>
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	f003 0308 	and.w	r3, r3, #8
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d016      	beq.n	80022d8 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f022 0208 	bic.w	r2, r2, #8
 80022b8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	2208      	movs	r2, #8
 80022c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2201      	movs	r2, #1
 80022c6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f000 f818 	bl	8002308 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80022d8:	bf00      	nop
 80022da:	3710      	adds	r7, #16
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80022e8:	bf00      	nop
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80022fc:	bf00      	nop
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8002310:	bf00      	nop
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800231c:	b5b0      	push	{r4, r5, r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	60b9      	str	r1, [r7, #8]
 8002326:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800232e:	2b01      	cmp	r3, #1
 8002330:	d101      	bne.n	8002336 <HAL_LTDC_ConfigLayer+0x1a>
 8002332:	2302      	movs	r3, #2
 8002334:	e02c      	b.n	8002390 <HAL_LTDC_ConfigLayer+0x74>
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2201      	movs	r2, #1
 800233a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2202      	movs	r2, #2
 8002342:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2134      	movs	r1, #52	; 0x34
 800234c:	fb01 f303 	mul.w	r3, r1, r3
 8002350:	4413      	add	r3, r2
 8002352:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	4614      	mov	r4, r2
 800235a:	461d      	mov	r5, r3
 800235c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800235e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002360:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002362:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002364:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002366:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002368:	682b      	ldr	r3, [r5, #0]
 800236a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	68b9      	ldr	r1, [r7, #8]
 8002370:	68f8      	ldr	r0, [r7, #12]
 8002372:	f000 f811 	bl	8002398 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2201      	movs	r2, #1
 800237c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2201      	movs	r2, #1
 8002382:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2200      	movs	r2, #0
 800238a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800238e:	2300      	movs	r3, #0
}
 8002390:	4618      	mov	r0, r3
 8002392:	3710      	adds	r7, #16
 8002394:	46bd      	mov	sp, r7
 8002396:	bdb0      	pop	{r4, r5, r7, pc}

08002398 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002398:	b480      	push	{r7}
 800239a:	b089      	sub	sp, #36	; 0x24
 800239c:	af00      	add	r7, sp, #0
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	60b9      	str	r1, [r7, #8]
 80023a2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	685a      	ldr	r2, [r3, #4]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	0c1b      	lsrs	r3, r3, #16
 80023b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023b4:	4413      	add	r3, r2
 80023b6:	041b      	lsls	r3, r3, #16
 80023b8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	461a      	mov	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	01db      	lsls	r3, r3, #7
 80023c4:	4413      	add	r3, r2
 80023c6:	3384      	adds	r3, #132	; 0x84
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	68fa      	ldr	r2, [r7, #12]
 80023cc:	6812      	ldr	r2, [r2, #0]
 80023ce:	4611      	mov	r1, r2
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	01d2      	lsls	r2, r2, #7
 80023d4:	440a      	add	r2, r1
 80023d6:	3284      	adds	r2, #132	; 0x84
 80023d8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80023dc:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	0c1b      	lsrs	r3, r3, #16
 80023ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023ee:	4413      	add	r3, r2
 80023f0:	1c5a      	adds	r2, r3, #1
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4619      	mov	r1, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	01db      	lsls	r3, r3, #7
 80023fc:	440b      	add	r3, r1
 80023fe:	3384      	adds	r3, #132	; 0x84
 8002400:	4619      	mov	r1, r3
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	4313      	orrs	r3, r2
 8002406:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	68da      	ldr	r2, [r3, #12]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002416:	4413      	add	r3, r2
 8002418:	041b      	lsls	r3, r3, #16
 800241a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	461a      	mov	r2, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	01db      	lsls	r3, r3, #7
 8002426:	4413      	add	r3, r2
 8002428:	3384      	adds	r3, #132	; 0x84
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	68fa      	ldr	r2, [r7, #12]
 800242e:	6812      	ldr	r2, [r2, #0]
 8002430:	4611      	mov	r1, r2
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	01d2      	lsls	r2, r2, #7
 8002436:	440a      	add	r2, r1
 8002438:	3284      	adds	r2, #132	; 0x84
 800243a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800243e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	689a      	ldr	r2, [r3, #8]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800244e:	4413      	add	r3, r2
 8002450:	1c5a      	adds	r2, r3, #1
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4619      	mov	r1, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	01db      	lsls	r3, r3, #7
 800245c:	440b      	add	r3, r1
 800245e:	3384      	adds	r3, #132	; 0x84
 8002460:	4619      	mov	r1, r3
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	4313      	orrs	r3, r2
 8002466:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	461a      	mov	r2, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	01db      	lsls	r3, r3, #7
 8002472:	4413      	add	r3, r2
 8002474:	3384      	adds	r3, #132	; 0x84
 8002476:	691b      	ldr	r3, [r3, #16]
 8002478:	68fa      	ldr	r2, [r7, #12]
 800247a:	6812      	ldr	r2, [r2, #0]
 800247c:	4611      	mov	r1, r2
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	01d2      	lsls	r2, r2, #7
 8002482:	440a      	add	r2, r1
 8002484:	3284      	adds	r2, #132	; 0x84
 8002486:	f023 0307 	bic.w	r3, r3, #7
 800248a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	461a      	mov	r2, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	01db      	lsls	r3, r3, #7
 8002496:	4413      	add	r3, r2
 8002498:	3384      	adds	r3, #132	; 0x84
 800249a:	461a      	mov	r2, r3
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	691b      	ldr	r3, [r3, #16]
 80024a0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80024a8:	021b      	lsls	r3, r3, #8
 80024aa:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80024b2:	041b      	lsls	r3, r3, #16
 80024b4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	699b      	ldr	r3, [r3, #24]
 80024ba:	061b      	lsls	r3, r3, #24
 80024bc:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	461a      	mov	r2, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	01db      	lsls	r3, r3, #7
 80024c8:	4413      	add	r3, r2
 80024ca:	3384      	adds	r3, #132	; 0x84
 80024cc:	699b      	ldr	r3, [r3, #24]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	461a      	mov	r2, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	01db      	lsls	r3, r3, #7
 80024d8:	4413      	add	r3, r2
 80024da:	3384      	adds	r3, #132	; 0x84
 80024dc:	461a      	mov	r2, r3
 80024de:	2300      	movs	r3, #0
 80024e0:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80024e8:	461a      	mov	r2, r3
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	431a      	orrs	r2, r3
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	431a      	orrs	r2, r3
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4619      	mov	r1, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	01db      	lsls	r3, r3, #7
 80024fc:	440b      	add	r3, r1
 80024fe:	3384      	adds	r3, #132	; 0x84
 8002500:	4619      	mov	r1, r3
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	4313      	orrs	r3, r2
 8002506:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	461a      	mov	r2, r3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	01db      	lsls	r3, r3, #7
 8002512:	4413      	add	r3, r2
 8002514:	3384      	adds	r3, #132	; 0x84
 8002516:	695b      	ldr	r3, [r3, #20]
 8002518:	68fa      	ldr	r2, [r7, #12]
 800251a:	6812      	ldr	r2, [r2, #0]
 800251c:	4611      	mov	r1, r2
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	01d2      	lsls	r2, r2, #7
 8002522:	440a      	add	r2, r1
 8002524:	3284      	adds	r2, #132	; 0x84
 8002526:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800252a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	461a      	mov	r2, r3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	01db      	lsls	r3, r3, #7
 8002536:	4413      	add	r3, r2
 8002538:	3384      	adds	r3, #132	; 0x84
 800253a:	461a      	mov	r2, r3
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	695b      	ldr	r3, [r3, #20]
 8002540:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	461a      	mov	r2, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	01db      	lsls	r3, r3, #7
 800254c:	4413      	add	r3, r2
 800254e:	3384      	adds	r3, #132	; 0x84
 8002550:	69da      	ldr	r2, [r3, #28]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4619      	mov	r1, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	01db      	lsls	r3, r3, #7
 800255c:	440b      	add	r3, r1
 800255e:	3384      	adds	r3, #132	; 0x84
 8002560:	4619      	mov	r1, r3
 8002562:	4b58      	ldr	r3, [pc, #352]	; (80026c4 <LTDC_SetConfig+0x32c>)
 8002564:	4013      	ands	r3, r2
 8002566:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	69da      	ldr	r2, [r3, #28]
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	6a1b      	ldr	r3, [r3, #32]
 8002570:	68f9      	ldr	r1, [r7, #12]
 8002572:	6809      	ldr	r1, [r1, #0]
 8002574:	4608      	mov	r0, r1
 8002576:	6879      	ldr	r1, [r7, #4]
 8002578:	01c9      	lsls	r1, r1, #7
 800257a:	4401      	add	r1, r0
 800257c:	3184      	adds	r1, #132	; 0x84
 800257e:	4313      	orrs	r3, r2
 8002580:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	461a      	mov	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	01db      	lsls	r3, r3, #7
 800258c:	4413      	add	r3, r2
 800258e:	3384      	adds	r3, #132	; 0x84
 8002590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	461a      	mov	r2, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	01db      	lsls	r3, r3, #7
 800259c:	4413      	add	r3, r2
 800259e:	3384      	adds	r3, #132	; 0x84
 80025a0:	461a      	mov	r2, r3
 80025a2:	2300      	movs	r3, #0
 80025a4:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	461a      	mov	r2, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	01db      	lsls	r3, r3, #7
 80025b0:	4413      	add	r3, r2
 80025b2:	3384      	adds	r3, #132	; 0x84
 80025b4:	461a      	mov	r2, r3
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ba:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	691b      	ldr	r3, [r3, #16]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d102      	bne.n	80025ca <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80025c4:	2304      	movs	r3, #4
 80025c6:	61fb      	str	r3, [r7, #28]
 80025c8:	e01b      	b.n	8002602 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	691b      	ldr	r3, [r3, #16]
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d102      	bne.n	80025d8 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80025d2:	2303      	movs	r3, #3
 80025d4:	61fb      	str	r3, [r7, #28]
 80025d6:	e014      	b.n	8002602 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	691b      	ldr	r3, [r3, #16]
 80025dc:	2b04      	cmp	r3, #4
 80025de:	d00b      	beq.n	80025f8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d007      	beq.n	80025f8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80025ec:	2b03      	cmp	r3, #3
 80025ee:	d003      	beq.n	80025f8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80025f4:	2b07      	cmp	r3, #7
 80025f6:	d102      	bne.n	80025fe <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80025f8:	2302      	movs	r3, #2
 80025fa:	61fb      	str	r3, [r7, #28]
 80025fc:	e001      	b.n	8002602 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80025fe:	2301      	movs	r3, #1
 8002600:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	461a      	mov	r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	01db      	lsls	r3, r3, #7
 800260c:	4413      	add	r3, r2
 800260e:	3384      	adds	r3, #132	; 0x84
 8002610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002612:	68fa      	ldr	r2, [r7, #12]
 8002614:	6812      	ldr	r2, [r2, #0]
 8002616:	4611      	mov	r1, r2
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	01d2      	lsls	r2, r2, #7
 800261c:	440a      	add	r2, r1
 800261e:	3284      	adds	r2, #132	; 0x84
 8002620:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8002624:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800262a:	69fa      	ldr	r2, [r7, #28]
 800262c:	fb02 f303 	mul.w	r3, r2, r3
 8002630:	041a      	lsls	r2, r3, #16
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	6859      	ldr	r1, [r3, #4]
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	1acb      	subs	r3, r1, r3
 800263c:	69f9      	ldr	r1, [r7, #28]
 800263e:	fb01 f303 	mul.w	r3, r1, r3
 8002642:	3303      	adds	r3, #3
 8002644:	68f9      	ldr	r1, [r7, #12]
 8002646:	6809      	ldr	r1, [r1, #0]
 8002648:	4608      	mov	r0, r1
 800264a:	6879      	ldr	r1, [r7, #4]
 800264c:	01c9      	lsls	r1, r1, #7
 800264e:	4401      	add	r1, r0
 8002650:	3184      	adds	r1, #132	; 0x84
 8002652:	4313      	orrs	r3, r2
 8002654:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	461a      	mov	r2, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	01db      	lsls	r3, r3, #7
 8002660:	4413      	add	r3, r2
 8002662:	3384      	adds	r3, #132	; 0x84
 8002664:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4619      	mov	r1, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	01db      	lsls	r3, r3, #7
 8002670:	440b      	add	r3, r1
 8002672:	3384      	adds	r3, #132	; 0x84
 8002674:	4619      	mov	r1, r3
 8002676:	4b14      	ldr	r3, [pc, #80]	; (80026c8 <LTDC_SetConfig+0x330>)
 8002678:	4013      	ands	r3, r2
 800267a:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	461a      	mov	r2, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	01db      	lsls	r3, r3, #7
 8002686:	4413      	add	r3, r2
 8002688:	3384      	adds	r3, #132	; 0x84
 800268a:	461a      	mov	r2, r3
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002690:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	461a      	mov	r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	01db      	lsls	r3, r3, #7
 800269c:	4413      	add	r3, r2
 800269e:	3384      	adds	r3, #132	; 0x84
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	68fa      	ldr	r2, [r7, #12]
 80026a4:	6812      	ldr	r2, [r2, #0]
 80026a6:	4611      	mov	r1, r2
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	01d2      	lsls	r2, r2, #7
 80026ac:	440a      	add	r2, r1
 80026ae:	3284      	adds	r2, #132	; 0x84
 80026b0:	f043 0301 	orr.w	r3, r3, #1
 80026b4:	6013      	str	r3, [r2, #0]
}
 80026b6:	bf00      	nop
 80026b8:	3724      	adds	r7, #36	; 0x24
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	fffff8f8 	.word	0xfffff8f8
 80026c8:	fffff800 	.word	0xfffff800

080026cc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80026d2:	2300      	movs	r3, #0
 80026d4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80026d6:	4b23      	ldr	r3, [pc, #140]	; (8002764 <HAL_PWREx_EnableOverDrive+0x98>)
 80026d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026da:	4a22      	ldr	r2, [pc, #136]	; (8002764 <HAL_PWREx_EnableOverDrive+0x98>)
 80026dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026e0:	6413      	str	r3, [r2, #64]	; 0x40
 80026e2:	4b20      	ldr	r3, [pc, #128]	; (8002764 <HAL_PWREx_EnableOverDrive+0x98>)
 80026e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ea:	603b      	str	r3, [r7, #0]
 80026ec:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80026ee:	4b1e      	ldr	r3, [pc, #120]	; (8002768 <HAL_PWREx_EnableOverDrive+0x9c>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a1d      	ldr	r2, [pc, #116]	; (8002768 <HAL_PWREx_EnableOverDrive+0x9c>)
 80026f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026f8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80026fa:	f7fe fe6d 	bl	80013d8 <HAL_GetTick>
 80026fe:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002700:	e009      	b.n	8002716 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002702:	f7fe fe69 	bl	80013d8 <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002710:	d901      	bls.n	8002716 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e022      	b.n	800275c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002716:	4b14      	ldr	r3, [pc, #80]	; (8002768 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800271e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002722:	d1ee      	bne.n	8002702 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002724:	4b10      	ldr	r3, [pc, #64]	; (8002768 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a0f      	ldr	r2, [pc, #60]	; (8002768 <HAL_PWREx_EnableOverDrive+0x9c>)
 800272a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800272e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002730:	f7fe fe52 	bl	80013d8 <HAL_GetTick>
 8002734:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002736:	e009      	b.n	800274c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002738:	f7fe fe4e 	bl	80013d8 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002746:	d901      	bls.n	800274c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e007      	b.n	800275c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800274c:	4b06      	ldr	r3, [pc, #24]	; (8002768 <HAL_PWREx_EnableOverDrive+0x9c>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002754:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002758:	d1ee      	bne.n	8002738 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800275a:	2300      	movs	r3, #0
}
 800275c:	4618      	mov	r0, r3
 800275e:	3708      	adds	r7, #8
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	40023800 	.word	0x40023800
 8002768:	40007000 	.word	0x40007000

0800276c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b086      	sub	sp, #24
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002774:	2300      	movs	r3, #0
 8002776:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d101      	bne.n	8002782 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e291      	b.n	8002ca6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	2b00      	cmp	r3, #0
 800278c:	f000 8087 	beq.w	800289e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002790:	4b96      	ldr	r3, [pc, #600]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f003 030c 	and.w	r3, r3, #12
 8002798:	2b04      	cmp	r3, #4
 800279a:	d00c      	beq.n	80027b6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800279c:	4b93      	ldr	r3, [pc, #588]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f003 030c 	and.w	r3, r3, #12
 80027a4:	2b08      	cmp	r3, #8
 80027a6:	d112      	bne.n	80027ce <HAL_RCC_OscConfig+0x62>
 80027a8:	4b90      	ldr	r3, [pc, #576]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027b4:	d10b      	bne.n	80027ce <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027b6:	4b8d      	ldr	r3, [pc, #564]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d06c      	beq.n	800289c <HAL_RCC_OscConfig+0x130>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d168      	bne.n	800289c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e26b      	b.n	8002ca6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027d6:	d106      	bne.n	80027e6 <HAL_RCC_OscConfig+0x7a>
 80027d8:	4b84      	ldr	r3, [pc, #528]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a83      	ldr	r2, [pc, #524]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 80027de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027e2:	6013      	str	r3, [r2, #0]
 80027e4:	e02e      	b.n	8002844 <HAL_RCC_OscConfig+0xd8>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d10c      	bne.n	8002808 <HAL_RCC_OscConfig+0x9c>
 80027ee:	4b7f      	ldr	r3, [pc, #508]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a7e      	ldr	r2, [pc, #504]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 80027f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027f8:	6013      	str	r3, [r2, #0]
 80027fa:	4b7c      	ldr	r3, [pc, #496]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a7b      	ldr	r2, [pc, #492]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 8002800:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002804:	6013      	str	r3, [r2, #0]
 8002806:	e01d      	b.n	8002844 <HAL_RCC_OscConfig+0xd8>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002810:	d10c      	bne.n	800282c <HAL_RCC_OscConfig+0xc0>
 8002812:	4b76      	ldr	r3, [pc, #472]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a75      	ldr	r2, [pc, #468]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 8002818:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800281c:	6013      	str	r3, [r2, #0]
 800281e:	4b73      	ldr	r3, [pc, #460]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a72      	ldr	r2, [pc, #456]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 8002824:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002828:	6013      	str	r3, [r2, #0]
 800282a:	e00b      	b.n	8002844 <HAL_RCC_OscConfig+0xd8>
 800282c:	4b6f      	ldr	r3, [pc, #444]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a6e      	ldr	r2, [pc, #440]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 8002832:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002836:	6013      	str	r3, [r2, #0]
 8002838:	4b6c      	ldr	r3, [pc, #432]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a6b      	ldr	r2, [pc, #428]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 800283e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002842:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d013      	beq.n	8002874 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800284c:	f7fe fdc4 	bl	80013d8 <HAL_GetTick>
 8002850:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002852:	e008      	b.n	8002866 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002854:	f7fe fdc0 	bl	80013d8 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b64      	cmp	r3, #100	; 0x64
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e21f      	b.n	8002ca6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002866:	4b61      	ldr	r3, [pc, #388]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d0f0      	beq.n	8002854 <HAL_RCC_OscConfig+0xe8>
 8002872:	e014      	b.n	800289e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002874:	f7fe fdb0 	bl	80013d8 <HAL_GetTick>
 8002878:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800287a:	e008      	b.n	800288e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800287c:	f7fe fdac 	bl	80013d8 <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b64      	cmp	r3, #100	; 0x64
 8002888:	d901      	bls.n	800288e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e20b      	b.n	8002ca6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800288e:	4b57      	ldr	r3, [pc, #348]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1f0      	bne.n	800287c <HAL_RCC_OscConfig+0x110>
 800289a:	e000      	b.n	800289e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800289c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d069      	beq.n	800297e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028aa:	4b50      	ldr	r3, [pc, #320]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f003 030c 	and.w	r3, r3, #12
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d00b      	beq.n	80028ce <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028b6:	4b4d      	ldr	r3, [pc, #308]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f003 030c 	and.w	r3, r3, #12
 80028be:	2b08      	cmp	r3, #8
 80028c0:	d11c      	bne.n	80028fc <HAL_RCC_OscConfig+0x190>
 80028c2:	4b4a      	ldr	r3, [pc, #296]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d116      	bne.n	80028fc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028ce:	4b47      	ldr	r3, [pc, #284]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d005      	beq.n	80028e6 <HAL_RCC_OscConfig+0x17a>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d001      	beq.n	80028e6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e1df      	b.n	8002ca6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028e6:	4b41      	ldr	r3, [pc, #260]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	493d      	ldr	r1, [pc, #244]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028fa:	e040      	b.n	800297e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d023      	beq.n	800294c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002904:	4b39      	ldr	r3, [pc, #228]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a38      	ldr	r2, [pc, #224]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 800290a:	f043 0301 	orr.w	r3, r3, #1
 800290e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002910:	f7fe fd62 	bl	80013d8 <HAL_GetTick>
 8002914:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002916:	e008      	b.n	800292a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002918:	f7fe fd5e 	bl	80013d8 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b02      	cmp	r3, #2
 8002924:	d901      	bls.n	800292a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e1bd      	b.n	8002ca6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800292a:	4b30      	ldr	r3, [pc, #192]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	2b00      	cmp	r3, #0
 8002934:	d0f0      	beq.n	8002918 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002936:	4b2d      	ldr	r3, [pc, #180]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	691b      	ldr	r3, [r3, #16]
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	4929      	ldr	r1, [pc, #164]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 8002946:	4313      	orrs	r3, r2
 8002948:	600b      	str	r3, [r1, #0]
 800294a:	e018      	b.n	800297e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800294c:	4b27      	ldr	r3, [pc, #156]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a26      	ldr	r2, [pc, #152]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 8002952:	f023 0301 	bic.w	r3, r3, #1
 8002956:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002958:	f7fe fd3e 	bl	80013d8 <HAL_GetTick>
 800295c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800295e:	e008      	b.n	8002972 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002960:	f7fe fd3a 	bl	80013d8 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b02      	cmp	r3, #2
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e199      	b.n	8002ca6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002972:	4b1e      	ldr	r3, [pc, #120]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	2b00      	cmp	r3, #0
 800297c:	d1f0      	bne.n	8002960 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0308 	and.w	r3, r3, #8
 8002986:	2b00      	cmp	r3, #0
 8002988:	d038      	beq.n	80029fc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	695b      	ldr	r3, [r3, #20]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d019      	beq.n	80029c6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002992:	4b16      	ldr	r3, [pc, #88]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 8002994:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002996:	4a15      	ldr	r2, [pc, #84]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 8002998:	f043 0301 	orr.w	r3, r3, #1
 800299c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800299e:	f7fe fd1b 	bl	80013d8 <HAL_GetTick>
 80029a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029a4:	e008      	b.n	80029b8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029a6:	f7fe fd17 	bl	80013d8 <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d901      	bls.n	80029b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e176      	b.n	8002ca6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029b8:	4b0c      	ldr	r3, [pc, #48]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 80029ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029bc:	f003 0302 	and.w	r3, r3, #2
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d0f0      	beq.n	80029a6 <HAL_RCC_OscConfig+0x23a>
 80029c4:	e01a      	b.n	80029fc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029c6:	4b09      	ldr	r3, [pc, #36]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 80029c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029ca:	4a08      	ldr	r2, [pc, #32]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 80029cc:	f023 0301 	bic.w	r3, r3, #1
 80029d0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029d2:	f7fe fd01 	bl	80013d8 <HAL_GetTick>
 80029d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029d8:	e00a      	b.n	80029f0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029da:	f7fe fcfd 	bl	80013d8 <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d903      	bls.n	80029f0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e15c      	b.n	8002ca6 <HAL_RCC_OscConfig+0x53a>
 80029ec:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029f0:	4b91      	ldr	r3, [pc, #580]	; (8002c38 <HAL_RCC_OscConfig+0x4cc>)
 80029f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029f4:	f003 0302 	and.w	r3, r3, #2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d1ee      	bne.n	80029da <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0304 	and.w	r3, r3, #4
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	f000 80a4 	beq.w	8002b52 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a0a:	4b8b      	ldr	r3, [pc, #556]	; (8002c38 <HAL_RCC_OscConfig+0x4cc>)
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d10d      	bne.n	8002a32 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a16:	4b88      	ldr	r3, [pc, #544]	; (8002c38 <HAL_RCC_OscConfig+0x4cc>)
 8002a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1a:	4a87      	ldr	r2, [pc, #540]	; (8002c38 <HAL_RCC_OscConfig+0x4cc>)
 8002a1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a20:	6413      	str	r3, [r2, #64]	; 0x40
 8002a22:	4b85      	ldr	r3, [pc, #532]	; (8002c38 <HAL_RCC_OscConfig+0x4cc>)
 8002a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a2a:	60bb      	str	r3, [r7, #8]
 8002a2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a32:	4b82      	ldr	r3, [pc, #520]	; (8002c3c <HAL_RCC_OscConfig+0x4d0>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d118      	bne.n	8002a70 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002a3e:	4b7f      	ldr	r3, [pc, #508]	; (8002c3c <HAL_RCC_OscConfig+0x4d0>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a7e      	ldr	r2, [pc, #504]	; (8002c3c <HAL_RCC_OscConfig+0x4d0>)
 8002a44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a4a:	f7fe fcc5 	bl	80013d8 <HAL_GetTick>
 8002a4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a50:	e008      	b.n	8002a64 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a52:	f7fe fcc1 	bl	80013d8 <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	2b64      	cmp	r3, #100	; 0x64
 8002a5e:	d901      	bls.n	8002a64 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e120      	b.n	8002ca6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a64:	4b75      	ldr	r3, [pc, #468]	; (8002c3c <HAL_RCC_OscConfig+0x4d0>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d0f0      	beq.n	8002a52 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d106      	bne.n	8002a86 <HAL_RCC_OscConfig+0x31a>
 8002a78:	4b6f      	ldr	r3, [pc, #444]	; (8002c38 <HAL_RCC_OscConfig+0x4cc>)
 8002a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a7c:	4a6e      	ldr	r2, [pc, #440]	; (8002c38 <HAL_RCC_OscConfig+0x4cc>)
 8002a7e:	f043 0301 	orr.w	r3, r3, #1
 8002a82:	6713      	str	r3, [r2, #112]	; 0x70
 8002a84:	e02d      	b.n	8002ae2 <HAL_RCC_OscConfig+0x376>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d10c      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x33c>
 8002a8e:	4b6a      	ldr	r3, [pc, #424]	; (8002c38 <HAL_RCC_OscConfig+0x4cc>)
 8002a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a92:	4a69      	ldr	r2, [pc, #420]	; (8002c38 <HAL_RCC_OscConfig+0x4cc>)
 8002a94:	f023 0301 	bic.w	r3, r3, #1
 8002a98:	6713      	str	r3, [r2, #112]	; 0x70
 8002a9a:	4b67      	ldr	r3, [pc, #412]	; (8002c38 <HAL_RCC_OscConfig+0x4cc>)
 8002a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a9e:	4a66      	ldr	r2, [pc, #408]	; (8002c38 <HAL_RCC_OscConfig+0x4cc>)
 8002aa0:	f023 0304 	bic.w	r3, r3, #4
 8002aa4:	6713      	str	r3, [r2, #112]	; 0x70
 8002aa6:	e01c      	b.n	8002ae2 <HAL_RCC_OscConfig+0x376>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	2b05      	cmp	r3, #5
 8002aae:	d10c      	bne.n	8002aca <HAL_RCC_OscConfig+0x35e>
 8002ab0:	4b61      	ldr	r3, [pc, #388]	; (8002c38 <HAL_RCC_OscConfig+0x4cc>)
 8002ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab4:	4a60      	ldr	r2, [pc, #384]	; (8002c38 <HAL_RCC_OscConfig+0x4cc>)
 8002ab6:	f043 0304 	orr.w	r3, r3, #4
 8002aba:	6713      	str	r3, [r2, #112]	; 0x70
 8002abc:	4b5e      	ldr	r3, [pc, #376]	; (8002c38 <HAL_RCC_OscConfig+0x4cc>)
 8002abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac0:	4a5d      	ldr	r2, [pc, #372]	; (8002c38 <HAL_RCC_OscConfig+0x4cc>)
 8002ac2:	f043 0301 	orr.w	r3, r3, #1
 8002ac6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ac8:	e00b      	b.n	8002ae2 <HAL_RCC_OscConfig+0x376>
 8002aca:	4b5b      	ldr	r3, [pc, #364]	; (8002c38 <HAL_RCC_OscConfig+0x4cc>)
 8002acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ace:	4a5a      	ldr	r2, [pc, #360]	; (8002c38 <HAL_RCC_OscConfig+0x4cc>)
 8002ad0:	f023 0301 	bic.w	r3, r3, #1
 8002ad4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ad6:	4b58      	ldr	r3, [pc, #352]	; (8002c38 <HAL_RCC_OscConfig+0x4cc>)
 8002ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ada:	4a57      	ldr	r2, [pc, #348]	; (8002c38 <HAL_RCC_OscConfig+0x4cc>)
 8002adc:	f023 0304 	bic.w	r3, r3, #4
 8002ae0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d015      	beq.n	8002b16 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aea:	f7fe fc75 	bl	80013d8 <HAL_GetTick>
 8002aee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002af0:	e00a      	b.n	8002b08 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002af2:	f7fe fc71 	bl	80013d8 <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d901      	bls.n	8002b08 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e0ce      	b.n	8002ca6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b08:	4b4b      	ldr	r3, [pc, #300]	; (8002c38 <HAL_RCC_OscConfig+0x4cc>)
 8002b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d0ee      	beq.n	8002af2 <HAL_RCC_OscConfig+0x386>
 8002b14:	e014      	b.n	8002b40 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b16:	f7fe fc5f 	bl	80013d8 <HAL_GetTick>
 8002b1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b1c:	e00a      	b.n	8002b34 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b1e:	f7fe fc5b 	bl	80013d8 <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d901      	bls.n	8002b34 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e0b8      	b.n	8002ca6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b34:	4b40      	ldr	r3, [pc, #256]	; (8002c38 <HAL_RCC_OscConfig+0x4cc>)
 8002b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b38:	f003 0302 	and.w	r3, r3, #2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d1ee      	bne.n	8002b1e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b40:	7dfb      	ldrb	r3, [r7, #23]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d105      	bne.n	8002b52 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b46:	4b3c      	ldr	r3, [pc, #240]	; (8002c38 <HAL_RCC_OscConfig+0x4cc>)
 8002b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4a:	4a3b      	ldr	r2, [pc, #236]	; (8002c38 <HAL_RCC_OscConfig+0x4cc>)
 8002b4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b50:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	699b      	ldr	r3, [r3, #24]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	f000 80a4 	beq.w	8002ca4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b5c:	4b36      	ldr	r3, [pc, #216]	; (8002c38 <HAL_RCC_OscConfig+0x4cc>)
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	f003 030c 	and.w	r3, r3, #12
 8002b64:	2b08      	cmp	r3, #8
 8002b66:	d06b      	beq.n	8002c40 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	699b      	ldr	r3, [r3, #24]
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d149      	bne.n	8002c04 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b70:	4b31      	ldr	r3, [pc, #196]	; (8002c38 <HAL_RCC_OscConfig+0x4cc>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a30      	ldr	r2, [pc, #192]	; (8002c38 <HAL_RCC_OscConfig+0x4cc>)
 8002b76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b7c:	f7fe fc2c 	bl	80013d8 <HAL_GetTick>
 8002b80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b82:	e008      	b.n	8002b96 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b84:	f7fe fc28 	bl	80013d8 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d901      	bls.n	8002b96 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e087      	b.n	8002ca6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b96:	4b28      	ldr	r3, [pc, #160]	; (8002c38 <HAL_RCC_OscConfig+0x4cc>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d1f0      	bne.n	8002b84 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	69da      	ldr	r2, [r3, #28]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a1b      	ldr	r3, [r3, #32]
 8002baa:	431a      	orrs	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb0:	019b      	lsls	r3, r3, #6
 8002bb2:	431a      	orrs	r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb8:	085b      	lsrs	r3, r3, #1
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	041b      	lsls	r3, r3, #16
 8002bbe:	431a      	orrs	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc4:	061b      	lsls	r3, r3, #24
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	4a1b      	ldr	r2, [pc, #108]	; (8002c38 <HAL_RCC_OscConfig+0x4cc>)
 8002bca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002bce:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bd0:	4b19      	ldr	r3, [pc, #100]	; (8002c38 <HAL_RCC_OscConfig+0x4cc>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a18      	ldr	r2, [pc, #96]	; (8002c38 <HAL_RCC_OscConfig+0x4cc>)
 8002bd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bdc:	f7fe fbfc 	bl	80013d8 <HAL_GetTick>
 8002be0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002be2:	e008      	b.n	8002bf6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002be4:	f7fe fbf8 	bl	80013d8 <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d901      	bls.n	8002bf6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e057      	b.n	8002ca6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bf6:	4b10      	ldr	r3, [pc, #64]	; (8002c38 <HAL_RCC_OscConfig+0x4cc>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d0f0      	beq.n	8002be4 <HAL_RCC_OscConfig+0x478>
 8002c02:	e04f      	b.n	8002ca4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c04:	4b0c      	ldr	r3, [pc, #48]	; (8002c38 <HAL_RCC_OscConfig+0x4cc>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a0b      	ldr	r2, [pc, #44]	; (8002c38 <HAL_RCC_OscConfig+0x4cc>)
 8002c0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c10:	f7fe fbe2 	bl	80013d8 <HAL_GetTick>
 8002c14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c16:	e008      	b.n	8002c2a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c18:	f7fe fbde 	bl	80013d8 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d901      	bls.n	8002c2a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e03d      	b.n	8002ca6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c2a:	4b03      	ldr	r3, [pc, #12]	; (8002c38 <HAL_RCC_OscConfig+0x4cc>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d1f0      	bne.n	8002c18 <HAL_RCC_OscConfig+0x4ac>
 8002c36:	e035      	b.n	8002ca4 <HAL_RCC_OscConfig+0x538>
 8002c38:	40023800 	.word	0x40023800
 8002c3c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002c40:	4b1b      	ldr	r3, [pc, #108]	; (8002cb0 <HAL_RCC_OscConfig+0x544>)
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d028      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d121      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d11a      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c6a:	68fa      	ldr	r2, [r7, #12]
 8002c6c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c70:	4013      	ands	r3, r2
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c76:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d111      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c86:	085b      	lsrs	r3, r3, #1
 8002c88:	3b01      	subs	r3, #1
 8002c8a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d107      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c9a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d001      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e000      	b.n	8002ca6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3718      	adds	r7, #24
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	40023800 	.word	0x40023800

08002cb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d101      	bne.n	8002ccc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e0d0      	b.n	8002e6e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ccc:	4b6a      	ldr	r3, [pc, #424]	; (8002e78 <HAL_RCC_ClockConfig+0x1c4>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 030f 	and.w	r3, r3, #15
 8002cd4:	683a      	ldr	r2, [r7, #0]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d910      	bls.n	8002cfc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cda:	4b67      	ldr	r3, [pc, #412]	; (8002e78 <HAL_RCC_ClockConfig+0x1c4>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f023 020f 	bic.w	r2, r3, #15
 8002ce2:	4965      	ldr	r1, [pc, #404]	; (8002e78 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cea:	4b63      	ldr	r3, [pc, #396]	; (8002e78 <HAL_RCC_ClockConfig+0x1c4>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 030f 	and.w	r3, r3, #15
 8002cf2:	683a      	ldr	r2, [r7, #0]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d001      	beq.n	8002cfc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e0b8      	b.n	8002e6e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0302 	and.w	r3, r3, #2
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d020      	beq.n	8002d4a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0304 	and.w	r3, r3, #4
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d005      	beq.n	8002d20 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d14:	4b59      	ldr	r3, [pc, #356]	; (8002e7c <HAL_RCC_ClockConfig+0x1c8>)
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	4a58      	ldr	r2, [pc, #352]	; (8002e7c <HAL_RCC_ClockConfig+0x1c8>)
 8002d1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d1e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0308 	and.w	r3, r3, #8
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d005      	beq.n	8002d38 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d2c:	4b53      	ldr	r3, [pc, #332]	; (8002e7c <HAL_RCC_ClockConfig+0x1c8>)
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	4a52      	ldr	r2, [pc, #328]	; (8002e7c <HAL_RCC_ClockConfig+0x1c8>)
 8002d32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d36:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d38:	4b50      	ldr	r3, [pc, #320]	; (8002e7c <HAL_RCC_ClockConfig+0x1c8>)
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	494d      	ldr	r1, [pc, #308]	; (8002e7c <HAL_RCC_ClockConfig+0x1c8>)
 8002d46:	4313      	orrs	r3, r2
 8002d48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d040      	beq.n	8002dd8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d107      	bne.n	8002d6e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d5e:	4b47      	ldr	r3, [pc, #284]	; (8002e7c <HAL_RCC_ClockConfig+0x1c8>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d115      	bne.n	8002d96 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e07f      	b.n	8002e6e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d107      	bne.n	8002d86 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d76:	4b41      	ldr	r3, [pc, #260]	; (8002e7c <HAL_RCC_ClockConfig+0x1c8>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d109      	bne.n	8002d96 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e073      	b.n	8002e6e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d86:	4b3d      	ldr	r3, [pc, #244]	; (8002e7c <HAL_RCC_ClockConfig+0x1c8>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0302 	and.w	r3, r3, #2
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d101      	bne.n	8002d96 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e06b      	b.n	8002e6e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d96:	4b39      	ldr	r3, [pc, #228]	; (8002e7c <HAL_RCC_ClockConfig+0x1c8>)
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f023 0203 	bic.w	r2, r3, #3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	4936      	ldr	r1, [pc, #216]	; (8002e7c <HAL_RCC_ClockConfig+0x1c8>)
 8002da4:	4313      	orrs	r3, r2
 8002da6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002da8:	f7fe fb16 	bl	80013d8 <HAL_GetTick>
 8002dac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dae:	e00a      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002db0:	f7fe fb12 	bl	80013d8 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d901      	bls.n	8002dc6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e053      	b.n	8002e6e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dc6:	4b2d      	ldr	r3, [pc, #180]	; (8002e7c <HAL_RCC_ClockConfig+0x1c8>)
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f003 020c 	and.w	r2, r3, #12
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d1eb      	bne.n	8002db0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002dd8:	4b27      	ldr	r3, [pc, #156]	; (8002e78 <HAL_RCC_ClockConfig+0x1c4>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 030f 	and.w	r3, r3, #15
 8002de0:	683a      	ldr	r2, [r7, #0]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d210      	bcs.n	8002e08 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002de6:	4b24      	ldr	r3, [pc, #144]	; (8002e78 <HAL_RCC_ClockConfig+0x1c4>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f023 020f 	bic.w	r2, r3, #15
 8002dee:	4922      	ldr	r1, [pc, #136]	; (8002e78 <HAL_RCC_ClockConfig+0x1c4>)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002df6:	4b20      	ldr	r3, [pc, #128]	; (8002e78 <HAL_RCC_ClockConfig+0x1c4>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 030f 	and.w	r3, r3, #15
 8002dfe:	683a      	ldr	r2, [r7, #0]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d001      	beq.n	8002e08 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e032      	b.n	8002e6e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0304 	and.w	r3, r3, #4
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d008      	beq.n	8002e26 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e14:	4b19      	ldr	r3, [pc, #100]	; (8002e7c <HAL_RCC_ClockConfig+0x1c8>)
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	4916      	ldr	r1, [pc, #88]	; (8002e7c <HAL_RCC_ClockConfig+0x1c8>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0308 	and.w	r3, r3, #8
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d009      	beq.n	8002e46 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e32:	4b12      	ldr	r3, [pc, #72]	; (8002e7c <HAL_RCC_ClockConfig+0x1c8>)
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	691b      	ldr	r3, [r3, #16]
 8002e3e:	00db      	lsls	r3, r3, #3
 8002e40:	490e      	ldr	r1, [pc, #56]	; (8002e7c <HAL_RCC_ClockConfig+0x1c8>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e46:	f000 f821 	bl	8002e8c <HAL_RCC_GetSysClockFreq>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	4b0b      	ldr	r3, [pc, #44]	; (8002e7c <HAL_RCC_ClockConfig+0x1c8>)
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	091b      	lsrs	r3, r3, #4
 8002e52:	f003 030f 	and.w	r3, r3, #15
 8002e56:	490a      	ldr	r1, [pc, #40]	; (8002e80 <HAL_RCC_ClockConfig+0x1cc>)
 8002e58:	5ccb      	ldrb	r3, [r1, r3]
 8002e5a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e5e:	4a09      	ldr	r2, [pc, #36]	; (8002e84 <HAL_RCC_ClockConfig+0x1d0>)
 8002e60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e62:	4b09      	ldr	r3, [pc, #36]	; (8002e88 <HAL_RCC_ClockConfig+0x1d4>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7fe fa72 	bl	8001350 <HAL_InitTick>

  return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3710      	adds	r7, #16
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	40023c00 	.word	0x40023c00
 8002e7c:	40023800 	.word	0x40023800
 8002e80:	08004358 	.word	0x08004358
 8002e84:	20000000 	.word	0x20000000
 8002e88:	20000004 	.word	0x20000004

08002e8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e8c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002e90:	b084      	sub	sp, #16
 8002e92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002e94:	2300      	movs	r3, #0
 8002e96:	607b      	str	r3, [r7, #4]
 8002e98:	2300      	movs	r3, #0
 8002e9a:	60fb      	str	r3, [r7, #12]
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ea4:	4b67      	ldr	r3, [pc, #412]	; (8003044 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f003 030c 	and.w	r3, r3, #12
 8002eac:	2b08      	cmp	r3, #8
 8002eae:	d00d      	beq.n	8002ecc <HAL_RCC_GetSysClockFreq+0x40>
 8002eb0:	2b08      	cmp	r3, #8
 8002eb2:	f200 80bd 	bhi.w	8003030 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d002      	beq.n	8002ec0 <HAL_RCC_GetSysClockFreq+0x34>
 8002eba:	2b04      	cmp	r3, #4
 8002ebc:	d003      	beq.n	8002ec6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002ebe:	e0b7      	b.n	8003030 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ec0:	4b61      	ldr	r3, [pc, #388]	; (8003048 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002ec2:	60bb      	str	r3, [r7, #8]
      break;
 8002ec4:	e0b7      	b.n	8003036 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ec6:	4b61      	ldr	r3, [pc, #388]	; (800304c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002ec8:	60bb      	str	r3, [r7, #8]
      break;
 8002eca:	e0b4      	b.n	8003036 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ecc:	4b5d      	ldr	r3, [pc, #372]	; (8003044 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ed4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002ed6:	4b5b      	ldr	r3, [pc, #364]	; (8003044 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d04d      	beq.n	8002f7e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ee2:	4b58      	ldr	r3, [pc, #352]	; (8003044 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	099b      	lsrs	r3, r3, #6
 8002ee8:	461a      	mov	r2, r3
 8002eea:	f04f 0300 	mov.w	r3, #0
 8002eee:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002ef2:	f04f 0100 	mov.w	r1, #0
 8002ef6:	ea02 0800 	and.w	r8, r2, r0
 8002efa:	ea03 0901 	and.w	r9, r3, r1
 8002efe:	4640      	mov	r0, r8
 8002f00:	4649      	mov	r1, r9
 8002f02:	f04f 0200 	mov.w	r2, #0
 8002f06:	f04f 0300 	mov.w	r3, #0
 8002f0a:	014b      	lsls	r3, r1, #5
 8002f0c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002f10:	0142      	lsls	r2, r0, #5
 8002f12:	4610      	mov	r0, r2
 8002f14:	4619      	mov	r1, r3
 8002f16:	ebb0 0008 	subs.w	r0, r0, r8
 8002f1a:	eb61 0109 	sbc.w	r1, r1, r9
 8002f1e:	f04f 0200 	mov.w	r2, #0
 8002f22:	f04f 0300 	mov.w	r3, #0
 8002f26:	018b      	lsls	r3, r1, #6
 8002f28:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002f2c:	0182      	lsls	r2, r0, #6
 8002f2e:	1a12      	subs	r2, r2, r0
 8002f30:	eb63 0301 	sbc.w	r3, r3, r1
 8002f34:	f04f 0000 	mov.w	r0, #0
 8002f38:	f04f 0100 	mov.w	r1, #0
 8002f3c:	00d9      	lsls	r1, r3, #3
 8002f3e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002f42:	00d0      	lsls	r0, r2, #3
 8002f44:	4602      	mov	r2, r0
 8002f46:	460b      	mov	r3, r1
 8002f48:	eb12 0208 	adds.w	r2, r2, r8
 8002f4c:	eb43 0309 	adc.w	r3, r3, r9
 8002f50:	f04f 0000 	mov.w	r0, #0
 8002f54:	f04f 0100 	mov.w	r1, #0
 8002f58:	0259      	lsls	r1, r3, #9
 8002f5a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002f5e:	0250      	lsls	r0, r2, #9
 8002f60:	4602      	mov	r2, r0
 8002f62:	460b      	mov	r3, r1
 8002f64:	4610      	mov	r0, r2
 8002f66:	4619      	mov	r1, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	f04f 0300 	mov.w	r3, #0
 8002f70:	f7fd f94a 	bl	8000208 <__aeabi_uldivmod>
 8002f74:	4602      	mov	r2, r0
 8002f76:	460b      	mov	r3, r1
 8002f78:	4613      	mov	r3, r2
 8002f7a:	60fb      	str	r3, [r7, #12]
 8002f7c:	e04a      	b.n	8003014 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f7e:	4b31      	ldr	r3, [pc, #196]	; (8003044 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	099b      	lsrs	r3, r3, #6
 8002f84:	461a      	mov	r2, r3
 8002f86:	f04f 0300 	mov.w	r3, #0
 8002f8a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002f8e:	f04f 0100 	mov.w	r1, #0
 8002f92:	ea02 0400 	and.w	r4, r2, r0
 8002f96:	ea03 0501 	and.w	r5, r3, r1
 8002f9a:	4620      	mov	r0, r4
 8002f9c:	4629      	mov	r1, r5
 8002f9e:	f04f 0200 	mov.w	r2, #0
 8002fa2:	f04f 0300 	mov.w	r3, #0
 8002fa6:	014b      	lsls	r3, r1, #5
 8002fa8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002fac:	0142      	lsls	r2, r0, #5
 8002fae:	4610      	mov	r0, r2
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	1b00      	subs	r0, r0, r4
 8002fb4:	eb61 0105 	sbc.w	r1, r1, r5
 8002fb8:	f04f 0200 	mov.w	r2, #0
 8002fbc:	f04f 0300 	mov.w	r3, #0
 8002fc0:	018b      	lsls	r3, r1, #6
 8002fc2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002fc6:	0182      	lsls	r2, r0, #6
 8002fc8:	1a12      	subs	r2, r2, r0
 8002fca:	eb63 0301 	sbc.w	r3, r3, r1
 8002fce:	f04f 0000 	mov.w	r0, #0
 8002fd2:	f04f 0100 	mov.w	r1, #0
 8002fd6:	00d9      	lsls	r1, r3, #3
 8002fd8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002fdc:	00d0      	lsls	r0, r2, #3
 8002fde:	4602      	mov	r2, r0
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	1912      	adds	r2, r2, r4
 8002fe4:	eb45 0303 	adc.w	r3, r5, r3
 8002fe8:	f04f 0000 	mov.w	r0, #0
 8002fec:	f04f 0100 	mov.w	r1, #0
 8002ff0:	0299      	lsls	r1, r3, #10
 8002ff2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002ff6:	0290      	lsls	r0, r2, #10
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	4610      	mov	r0, r2
 8002ffe:	4619      	mov	r1, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	461a      	mov	r2, r3
 8003004:	f04f 0300 	mov.w	r3, #0
 8003008:	f7fd f8fe 	bl	8000208 <__aeabi_uldivmod>
 800300c:	4602      	mov	r2, r0
 800300e:	460b      	mov	r3, r1
 8003010:	4613      	mov	r3, r2
 8003012:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003014:	4b0b      	ldr	r3, [pc, #44]	; (8003044 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	0c1b      	lsrs	r3, r3, #16
 800301a:	f003 0303 	and.w	r3, r3, #3
 800301e:	3301      	adds	r3, #1
 8003020:	005b      	lsls	r3, r3, #1
 8003022:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003024:	68fa      	ldr	r2, [r7, #12]
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	fbb2 f3f3 	udiv	r3, r2, r3
 800302c:	60bb      	str	r3, [r7, #8]
      break;
 800302e:	e002      	b.n	8003036 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003030:	4b05      	ldr	r3, [pc, #20]	; (8003048 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003032:	60bb      	str	r3, [r7, #8]
      break;
 8003034:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003036:	68bb      	ldr	r3, [r7, #8]
}
 8003038:	4618      	mov	r0, r3
 800303a:	3710      	adds	r7, #16
 800303c:	46bd      	mov	sp, r7
 800303e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003042:	bf00      	nop
 8003044:	40023800 	.word	0x40023800
 8003048:	00f42400 	.word	0x00f42400
 800304c:	007a1200 	.word	0x007a1200

08003050 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003050:	b480      	push	{r7}
 8003052:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003054:	4b03      	ldr	r3, [pc, #12]	; (8003064 <HAL_RCC_GetHCLKFreq+0x14>)
 8003056:	681b      	ldr	r3, [r3, #0]
}
 8003058:	4618      	mov	r0, r3
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	20000000 	.word	0x20000000

08003068 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800306c:	f7ff fff0 	bl	8003050 <HAL_RCC_GetHCLKFreq>
 8003070:	4602      	mov	r2, r0
 8003072:	4b05      	ldr	r3, [pc, #20]	; (8003088 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	0a9b      	lsrs	r3, r3, #10
 8003078:	f003 0307 	and.w	r3, r3, #7
 800307c:	4903      	ldr	r1, [pc, #12]	; (800308c <HAL_RCC_GetPCLK1Freq+0x24>)
 800307e:	5ccb      	ldrb	r3, [r1, r3]
 8003080:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003084:	4618      	mov	r0, r3
 8003086:	bd80      	pop	{r7, pc}
 8003088:	40023800 	.word	0x40023800
 800308c:	08004368 	.word	0x08004368

08003090 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003094:	f7ff ffdc 	bl	8003050 <HAL_RCC_GetHCLKFreq>
 8003098:	4602      	mov	r2, r0
 800309a:	4b05      	ldr	r3, [pc, #20]	; (80030b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	0b5b      	lsrs	r3, r3, #13
 80030a0:	f003 0307 	and.w	r3, r3, #7
 80030a4:	4903      	ldr	r1, [pc, #12]	; (80030b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030a6:	5ccb      	ldrb	r3, [r1, r3]
 80030a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	40023800 	.word	0x40023800
 80030b4:	08004368 	.word	0x08004368

080030b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b088      	sub	sp, #32
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80030c0:	2300      	movs	r3, #0
 80030c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80030c4:	2300      	movs	r3, #0
 80030c6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80030c8:	2300      	movs	r3, #0
 80030ca:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80030cc:	2300      	movs	r3, #0
 80030ce:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80030d0:	2300      	movs	r3, #0
 80030d2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0301 	and.w	r3, r3, #1
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d012      	beq.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80030e0:	4b69      	ldr	r3, [pc, #420]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	4a68      	ldr	r2, [pc, #416]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030e6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80030ea:	6093      	str	r3, [r2, #8]
 80030ec:	4b66      	ldr	r3, [pc, #408]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030ee:	689a      	ldr	r2, [r3, #8]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030f4:	4964      	ldr	r1, [pc, #400]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030f6:	4313      	orrs	r3, r2
 80030f8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d101      	bne.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003102:	2301      	movs	r3, #1
 8003104:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d017      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003112:	4b5d      	ldr	r3, [pc, #372]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003114:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003118:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003120:	4959      	ldr	r1, [pc, #356]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003122:	4313      	orrs	r3, r2
 8003124:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800312c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003130:	d101      	bne.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003132:	2301      	movs	r3, #1
 8003134:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800313a:	2b00      	cmp	r3, #0
 800313c:	d101      	bne.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800313e:	2301      	movs	r3, #1
 8003140:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d017      	beq.n	800317e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800314e:	4b4e      	ldr	r3, [pc, #312]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003150:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003154:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315c:	494a      	ldr	r1, [pc, #296]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800315e:	4313      	orrs	r3, r2
 8003160:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003168:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800316c:	d101      	bne.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800316e:	2301      	movs	r3, #1
 8003170:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003176:	2b00      	cmp	r3, #0
 8003178:	d101      	bne.n	800317e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800317a:	2301      	movs	r3, #1
 800317c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d001      	beq.n	800318e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800318a:	2301      	movs	r3, #1
 800318c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0320 	and.w	r3, r3, #32
 8003196:	2b00      	cmp	r3, #0
 8003198:	f000 808b 	beq.w	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800319c:	4b3a      	ldr	r3, [pc, #232]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800319e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a0:	4a39      	ldr	r2, [pc, #228]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031a6:	6413      	str	r3, [r2, #64]	; 0x40
 80031a8:	4b37      	ldr	r3, [pc, #220]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031b0:	60bb      	str	r3, [r7, #8]
 80031b2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80031b4:	4b35      	ldr	r3, [pc, #212]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a34      	ldr	r2, [pc, #208]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80031ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031c0:	f7fe f90a 	bl	80013d8 <HAL_GetTick>
 80031c4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80031c6:	e008      	b.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031c8:	f7fe f906 	bl	80013d8 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	2b64      	cmp	r3, #100	; 0x64
 80031d4:	d901      	bls.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e357      	b.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80031da:	4b2c      	ldr	r3, [pc, #176]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d0f0      	beq.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80031e6:	4b28      	ldr	r3, [pc, #160]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031ee:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d035      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031fe:	693a      	ldr	r2, [r7, #16]
 8003200:	429a      	cmp	r2, r3
 8003202:	d02e      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003204:	4b20      	ldr	r3, [pc, #128]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003208:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800320c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800320e:	4b1e      	ldr	r3, [pc, #120]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003212:	4a1d      	ldr	r2, [pc, #116]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003214:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003218:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800321a:	4b1b      	ldr	r3, [pc, #108]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800321c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800321e:	4a1a      	ldr	r2, [pc, #104]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003220:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003224:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003226:	4a18      	ldr	r2, [pc, #96]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800322c:	4b16      	ldr	r3, [pc, #88]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800322e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003230:	f003 0301 	and.w	r3, r3, #1
 8003234:	2b01      	cmp	r3, #1
 8003236:	d114      	bne.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003238:	f7fe f8ce 	bl	80013d8 <HAL_GetTick>
 800323c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800323e:	e00a      	b.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003240:	f7fe f8ca 	bl	80013d8 <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	f241 3288 	movw	r2, #5000	; 0x1388
 800324e:	4293      	cmp	r3, r2
 8003250:	d901      	bls.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e319      	b.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003256:	4b0c      	ldr	r3, [pc, #48]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800325a:	f003 0302 	and.w	r3, r3, #2
 800325e:	2b00      	cmp	r3, #0
 8003260:	d0ee      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003266:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800326a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800326e:	d111      	bne.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003270:	4b05      	ldr	r3, [pc, #20]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800327c:	4b04      	ldr	r3, [pc, #16]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800327e:	400b      	ands	r3, r1
 8003280:	4901      	ldr	r1, [pc, #4]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003282:	4313      	orrs	r3, r2
 8003284:	608b      	str	r3, [r1, #8]
 8003286:	e00b      	b.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003288:	40023800 	.word	0x40023800
 800328c:	40007000 	.word	0x40007000
 8003290:	0ffffcff 	.word	0x0ffffcff
 8003294:	4bb1      	ldr	r3, [pc, #708]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	4ab0      	ldr	r2, [pc, #704]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800329a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800329e:	6093      	str	r3, [r2, #8]
 80032a0:	4bae      	ldr	r3, [pc, #696]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80032a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032ac:	49ab      	ldr	r1, [pc, #684]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0310 	and.w	r3, r3, #16
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d010      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80032be:	4ba7      	ldr	r3, [pc, #668]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80032c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032c4:	4aa5      	ldr	r2, [pc, #660]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80032c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032ca:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80032ce:	4ba3      	ldr	r3, [pc, #652]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80032d0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d8:	49a0      	ldr	r1, [pc, #640]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d00a      	beq.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80032ec:	4b9b      	ldr	r3, [pc, #620]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80032ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032f2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032fa:	4998      	ldr	r1, [pc, #608]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80032fc:	4313      	orrs	r3, r2
 80032fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d00a      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800330e:	4b93      	ldr	r3, [pc, #588]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003310:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003314:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800331c:	498f      	ldr	r1, [pc, #572]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800331e:	4313      	orrs	r3, r2
 8003320:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d00a      	beq.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003330:	4b8a      	ldr	r3, [pc, #552]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003336:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800333e:	4987      	ldr	r1, [pc, #540]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003340:	4313      	orrs	r3, r2
 8003342:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00a      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003352:	4b82      	ldr	r3, [pc, #520]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003358:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003360:	497e      	ldr	r1, [pc, #504]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003362:	4313      	orrs	r3, r2
 8003364:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003370:	2b00      	cmp	r3, #0
 8003372:	d00a      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003374:	4b79      	ldr	r3, [pc, #484]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003376:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800337a:	f023 0203 	bic.w	r2, r3, #3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003382:	4976      	ldr	r1, [pc, #472]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003384:	4313      	orrs	r3, r2
 8003386:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003392:	2b00      	cmp	r3, #0
 8003394:	d00a      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003396:	4b71      	ldr	r3, [pc, #452]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003398:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800339c:	f023 020c 	bic.w	r2, r3, #12
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033a4:	496d      	ldr	r1, [pc, #436]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80033a6:	4313      	orrs	r3, r2
 80033a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d00a      	beq.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80033b8:	4b68      	ldr	r3, [pc, #416]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80033ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033be:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033c6:	4965      	ldr	r1, [pc, #404]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d00a      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80033da:	4b60      	ldr	r3, [pc, #384]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80033dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033e0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033e8:	495c      	ldr	r1, [pc, #368]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d00a      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80033fc:	4b57      	ldr	r3, [pc, #348]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80033fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003402:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800340a:	4954      	ldr	r1, [pc, #336]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800340c:	4313      	orrs	r3, r2
 800340e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00a      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800341e:	4b4f      	ldr	r3, [pc, #316]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003420:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003424:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800342c:	494b      	ldr	r1, [pc, #300]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800342e:	4313      	orrs	r3, r2
 8003430:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d00a      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003440:	4b46      	ldr	r3, [pc, #280]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003446:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800344e:	4943      	ldr	r1, [pc, #268]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003450:	4313      	orrs	r3, r2
 8003452:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00a      	beq.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003462:	4b3e      	ldr	r3, [pc, #248]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003464:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003468:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003470:	493a      	ldr	r1, [pc, #232]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003472:	4313      	orrs	r3, r2
 8003474:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d00a      	beq.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003484:	4b35      	ldr	r3, [pc, #212]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003486:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800348a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003492:	4932      	ldr	r1, [pc, #200]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003494:	4313      	orrs	r3, r2
 8003496:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d011      	beq.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80034a6:	4b2d      	ldr	r3, [pc, #180]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80034a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ac:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034b4:	4929      	ldr	r1, [pc, #164]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034c4:	d101      	bne.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80034c6:	2301      	movs	r3, #1
 80034c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0308 	and.w	r3, r3, #8
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80034d6:	2301      	movs	r3, #1
 80034d8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00a      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80034e6:	4b1d      	ldr	r3, [pc, #116]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80034e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ec:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034f4:	4919      	ldr	r1, [pc, #100]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80034f6:	4313      	orrs	r3, r2
 80034f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d00b      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003508:	4b14      	ldr	r3, [pc, #80]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800350a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800350e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003518:	4910      	ldr	r1, [pc, #64]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800351a:	4313      	orrs	r3, r2
 800351c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	2b01      	cmp	r3, #1
 8003524:	d006      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800352e:	2b00      	cmp	r3, #0
 8003530:	f000 80d9 	beq.w	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003534:	4b09      	ldr	r3, [pc, #36]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a08      	ldr	r2, [pc, #32]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800353a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800353e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003540:	f7fd ff4a 	bl	80013d8 <HAL_GetTick>
 8003544:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003546:	e00b      	b.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003548:	f7fd ff46 	bl	80013d8 <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	2b64      	cmp	r3, #100	; 0x64
 8003554:	d904      	bls.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e197      	b.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800355a:	bf00      	nop
 800355c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003560:	4b6c      	ldr	r3, [pc, #432]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d1ed      	bne.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0301 	and.w	r3, r3, #1
 8003574:	2b00      	cmp	r3, #0
 8003576:	d021      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800357c:	2b00      	cmp	r3, #0
 800357e:	d11d      	bne.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003580:	4b64      	ldr	r3, [pc, #400]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003582:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003586:	0c1b      	lsrs	r3, r3, #16
 8003588:	f003 0303 	and.w	r3, r3, #3
 800358c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800358e:	4b61      	ldr	r3, [pc, #388]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003590:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003594:	0e1b      	lsrs	r3, r3, #24
 8003596:	f003 030f 	and.w	r3, r3, #15
 800359a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	019a      	lsls	r2, r3, #6
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	041b      	lsls	r3, r3, #16
 80035a6:	431a      	orrs	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	061b      	lsls	r3, r3, #24
 80035ac:	431a      	orrs	r2, r3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	071b      	lsls	r3, r3, #28
 80035b4:	4957      	ldr	r1, [pc, #348]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d004      	beq.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035d0:	d00a      	beq.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d02e      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035e6:	d129      	bne.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80035e8:	4b4a      	ldr	r3, [pc, #296]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035ee:	0c1b      	lsrs	r3, r3, #16
 80035f0:	f003 0303 	and.w	r3, r3, #3
 80035f4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80035f6:	4b47      	ldr	r3, [pc, #284]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035fc:	0f1b      	lsrs	r3, r3, #28
 80035fe:	f003 0307 	and.w	r3, r3, #7
 8003602:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	019a      	lsls	r2, r3, #6
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	041b      	lsls	r3, r3, #16
 800360e:	431a      	orrs	r2, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	061b      	lsls	r3, r3, #24
 8003616:	431a      	orrs	r2, r3
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	071b      	lsls	r3, r3, #28
 800361c:	493d      	ldr	r1, [pc, #244]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800361e:	4313      	orrs	r3, r2
 8003620:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003624:	4b3b      	ldr	r3, [pc, #236]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003626:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800362a:	f023 021f 	bic.w	r2, r3, #31
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003632:	3b01      	subs	r3, #1
 8003634:	4937      	ldr	r1, [pc, #220]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003636:	4313      	orrs	r3, r2
 8003638:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d01d      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003648:	4b32      	ldr	r3, [pc, #200]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800364a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800364e:	0e1b      	lsrs	r3, r3, #24
 8003650:	f003 030f 	and.w	r3, r3, #15
 8003654:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003656:	4b2f      	ldr	r3, [pc, #188]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003658:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800365c:	0f1b      	lsrs	r3, r3, #28
 800365e:	f003 0307 	and.w	r3, r3, #7
 8003662:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	019a      	lsls	r2, r3, #6
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	041b      	lsls	r3, r3, #16
 8003670:	431a      	orrs	r2, r3
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	061b      	lsls	r3, r3, #24
 8003676:	431a      	orrs	r2, r3
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	071b      	lsls	r3, r3, #28
 800367c:	4925      	ldr	r1, [pc, #148]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800367e:	4313      	orrs	r3, r2
 8003680:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d011      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	019a      	lsls	r2, r3, #6
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	691b      	ldr	r3, [r3, #16]
 800369a:	041b      	lsls	r3, r3, #16
 800369c:	431a      	orrs	r2, r3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	061b      	lsls	r3, r3, #24
 80036a4:	431a      	orrs	r2, r3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	071b      	lsls	r3, r3, #28
 80036ac:	4919      	ldr	r1, [pc, #100]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80036b4:	4b17      	ldr	r3, [pc, #92]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a16      	ldr	r2, [pc, #88]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80036be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036c0:	f7fd fe8a 	bl	80013d8 <HAL_GetTick>
 80036c4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80036c6:	e008      	b.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80036c8:	f7fd fe86 	bl	80013d8 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	2b64      	cmp	r3, #100	; 0x64
 80036d4:	d901      	bls.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e0d7      	b.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80036da:	4b0e      	ldr	r3, [pc, #56]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d0f0      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	f040 80cd 	bne.w	8003888 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80036ee:	4b09      	ldr	r3, [pc, #36]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a08      	ldr	r2, [pc, #32]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036fa:	f7fd fe6d 	bl	80013d8 <HAL_GetTick>
 80036fe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003700:	e00a      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003702:	f7fd fe69 	bl	80013d8 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	2b64      	cmp	r3, #100	; 0x64
 800370e:	d903      	bls.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e0ba      	b.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003714:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003718:	4b5e      	ldr	r3, [pc, #376]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003720:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003724:	d0ed      	beq.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d003      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003736:	2b00      	cmp	r3, #0
 8003738:	d009      	beq.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003742:	2b00      	cmp	r3, #0
 8003744:	d02e      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374a:	2b00      	cmp	r3, #0
 800374c:	d12a      	bne.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800374e:	4b51      	ldr	r3, [pc, #324]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003750:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003754:	0c1b      	lsrs	r3, r3, #16
 8003756:	f003 0303 	and.w	r3, r3, #3
 800375a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800375c:	4b4d      	ldr	r3, [pc, #308]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800375e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003762:	0f1b      	lsrs	r3, r3, #28
 8003764:	f003 0307 	and.w	r3, r3, #7
 8003768:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	695b      	ldr	r3, [r3, #20]
 800376e:	019a      	lsls	r2, r3, #6
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	041b      	lsls	r3, r3, #16
 8003774:	431a      	orrs	r2, r3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	699b      	ldr	r3, [r3, #24]
 800377a:	061b      	lsls	r3, r3, #24
 800377c:	431a      	orrs	r2, r3
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	071b      	lsls	r3, r3, #28
 8003782:	4944      	ldr	r1, [pc, #272]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003784:	4313      	orrs	r3, r2
 8003786:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800378a:	4b42      	ldr	r3, [pc, #264]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800378c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003790:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003798:	3b01      	subs	r3, #1
 800379a:	021b      	lsls	r3, r3, #8
 800379c:	493d      	ldr	r1, [pc, #244]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d022      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037b8:	d11d      	bne.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80037ba:	4b36      	ldr	r3, [pc, #216]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037c0:	0e1b      	lsrs	r3, r3, #24
 80037c2:	f003 030f 	and.w	r3, r3, #15
 80037c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80037c8:	4b32      	ldr	r3, [pc, #200]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ce:	0f1b      	lsrs	r3, r3, #28
 80037d0:	f003 0307 	and.w	r3, r3, #7
 80037d4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	695b      	ldr	r3, [r3, #20]
 80037da:	019a      	lsls	r2, r3, #6
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a1b      	ldr	r3, [r3, #32]
 80037e0:	041b      	lsls	r3, r3, #16
 80037e2:	431a      	orrs	r2, r3
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	061b      	lsls	r3, r3, #24
 80037e8:	431a      	orrs	r2, r3
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	071b      	lsls	r3, r3, #28
 80037ee:	4929      	ldr	r1, [pc, #164]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0308 	and.w	r3, r3, #8
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d028      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003802:	4b24      	ldr	r3, [pc, #144]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003804:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003808:	0e1b      	lsrs	r3, r3, #24
 800380a:	f003 030f 	and.w	r3, r3, #15
 800380e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003810:	4b20      	ldr	r3, [pc, #128]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003816:	0c1b      	lsrs	r3, r3, #16
 8003818:	f003 0303 	and.w	r3, r3, #3
 800381c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	695b      	ldr	r3, [r3, #20]
 8003822:	019a      	lsls	r2, r3, #6
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	041b      	lsls	r3, r3, #16
 8003828:	431a      	orrs	r2, r3
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	061b      	lsls	r3, r3, #24
 800382e:	431a      	orrs	r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	69db      	ldr	r3, [r3, #28]
 8003834:	071b      	lsls	r3, r3, #28
 8003836:	4917      	ldr	r1, [pc, #92]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003838:	4313      	orrs	r3, r2
 800383a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800383e:	4b15      	ldr	r3, [pc, #84]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003840:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003844:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800384c:	4911      	ldr	r1, [pc, #68]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800384e:	4313      	orrs	r3, r2
 8003850:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003854:	4b0f      	ldr	r3, [pc, #60]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a0e      	ldr	r2, [pc, #56]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800385a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800385e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003860:	f7fd fdba 	bl	80013d8 <HAL_GetTick>
 8003864:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003866:	e008      	b.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003868:	f7fd fdb6 	bl	80013d8 <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	2b64      	cmp	r3, #100	; 0x64
 8003874:	d901      	bls.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e007      	b.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800387a:	4b06      	ldr	r3, [pc, #24]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003882:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003886:	d1ef      	bne.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003888:	2300      	movs	r3, #0
}
 800388a:	4618      	mov	r0, r3
 800388c:	3720      	adds	r7, #32
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	40023800 	.word	0x40023800

08003898 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d101      	bne.n	80038ac <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e025      	b.n	80038f8 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d106      	bne.n	80038c6 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f7fd fcb5 	bl	8001230 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2202      	movs	r2, #2
 80038ca:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	3304      	adds	r3, #4
 80038d6:	4619      	mov	r1, r3
 80038d8:	4610      	mov	r0, r2
 80038da:	f000 fc13 	bl	8004104 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6818      	ldr	r0, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	461a      	mov	r2, r3
 80038e8:	6839      	ldr	r1, [r7, #0]
 80038ea:	f000 fc7d 	bl	80041e8 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2201      	movs	r2, #1
 80038f2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 80038f6:	2300      	movs	r3, #0
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3708      	adds	r7, #8
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e040      	b.n	8003994 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003916:	2b00      	cmp	r3, #0
 8003918:	d106      	bne.n	8003928 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f7fd fbb0 	bl	8001088 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2224      	movs	r2, #36	; 0x24
 800392c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f022 0201 	bic.w	r2, r2, #1
 800393c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 f82c 	bl	800399c <UART_SetConfig>
 8003944:	4603      	mov	r3, r0
 8003946:	2b01      	cmp	r3, #1
 8003948:	d101      	bne.n	800394e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e022      	b.n	8003994 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003952:	2b00      	cmp	r3, #0
 8003954:	d002      	beq.n	800395c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f000 fa82 	bl	8003e60 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	685a      	ldr	r2, [r3, #4]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800396a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	689a      	ldr	r2, [r3, #8]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800397a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f042 0201 	orr.w	r2, r2, #1
 800398a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f000 fb09 	bl	8003fa4 <UART_CheckIdleState>
 8003992:	4603      	mov	r3, r0
}
 8003994:	4618      	mov	r0, r3
 8003996:	3708      	adds	r7, #8
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b088      	sub	sp, #32
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80039a4:	2300      	movs	r3, #0
 80039a6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	689a      	ldr	r2, [r3, #8]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	691b      	ldr	r3, [r3, #16]
 80039b0:	431a      	orrs	r2, r3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	695b      	ldr	r3, [r3, #20]
 80039b6:	431a      	orrs	r2, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	69db      	ldr	r3, [r3, #28]
 80039bc:	4313      	orrs	r3, r2
 80039be:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	4ba7      	ldr	r3, [pc, #668]	; (8003c64 <UART_SetConfig+0x2c8>)
 80039c8:	4013      	ands	r3, r2
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	6812      	ldr	r2, [r2, #0]
 80039ce:	6979      	ldr	r1, [r7, #20]
 80039d0:	430b      	orrs	r3, r1
 80039d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	68da      	ldr	r2, [r3, #12]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	430a      	orrs	r2, r1
 80039e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	699b      	ldr	r3, [r3, #24]
 80039ee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a1b      	ldr	r3, [r3, #32]
 80039f4:	697a      	ldr	r2, [r7, #20]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	697a      	ldr	r2, [r7, #20]
 8003a0a:	430a      	orrs	r2, r1
 8003a0c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a95      	ldr	r2, [pc, #596]	; (8003c68 <UART_SetConfig+0x2cc>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d120      	bne.n	8003a5a <UART_SetConfig+0xbe>
 8003a18:	4b94      	ldr	r3, [pc, #592]	; (8003c6c <UART_SetConfig+0x2d0>)
 8003a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a1e:	f003 0303 	and.w	r3, r3, #3
 8003a22:	2b03      	cmp	r3, #3
 8003a24:	d816      	bhi.n	8003a54 <UART_SetConfig+0xb8>
 8003a26:	a201      	add	r2, pc, #4	; (adr r2, 8003a2c <UART_SetConfig+0x90>)
 8003a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a2c:	08003a3d 	.word	0x08003a3d
 8003a30:	08003a49 	.word	0x08003a49
 8003a34:	08003a43 	.word	0x08003a43
 8003a38:	08003a4f 	.word	0x08003a4f
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	77fb      	strb	r3, [r7, #31]
 8003a40:	e14f      	b.n	8003ce2 <UART_SetConfig+0x346>
 8003a42:	2302      	movs	r3, #2
 8003a44:	77fb      	strb	r3, [r7, #31]
 8003a46:	e14c      	b.n	8003ce2 <UART_SetConfig+0x346>
 8003a48:	2304      	movs	r3, #4
 8003a4a:	77fb      	strb	r3, [r7, #31]
 8003a4c:	e149      	b.n	8003ce2 <UART_SetConfig+0x346>
 8003a4e:	2308      	movs	r3, #8
 8003a50:	77fb      	strb	r3, [r7, #31]
 8003a52:	e146      	b.n	8003ce2 <UART_SetConfig+0x346>
 8003a54:	2310      	movs	r3, #16
 8003a56:	77fb      	strb	r3, [r7, #31]
 8003a58:	e143      	b.n	8003ce2 <UART_SetConfig+0x346>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a84      	ldr	r2, [pc, #528]	; (8003c70 <UART_SetConfig+0x2d4>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d132      	bne.n	8003aca <UART_SetConfig+0x12e>
 8003a64:	4b81      	ldr	r3, [pc, #516]	; (8003c6c <UART_SetConfig+0x2d0>)
 8003a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a6a:	f003 030c 	and.w	r3, r3, #12
 8003a6e:	2b0c      	cmp	r3, #12
 8003a70:	d828      	bhi.n	8003ac4 <UART_SetConfig+0x128>
 8003a72:	a201      	add	r2, pc, #4	; (adr r2, 8003a78 <UART_SetConfig+0xdc>)
 8003a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a78:	08003aad 	.word	0x08003aad
 8003a7c:	08003ac5 	.word	0x08003ac5
 8003a80:	08003ac5 	.word	0x08003ac5
 8003a84:	08003ac5 	.word	0x08003ac5
 8003a88:	08003ab9 	.word	0x08003ab9
 8003a8c:	08003ac5 	.word	0x08003ac5
 8003a90:	08003ac5 	.word	0x08003ac5
 8003a94:	08003ac5 	.word	0x08003ac5
 8003a98:	08003ab3 	.word	0x08003ab3
 8003a9c:	08003ac5 	.word	0x08003ac5
 8003aa0:	08003ac5 	.word	0x08003ac5
 8003aa4:	08003ac5 	.word	0x08003ac5
 8003aa8:	08003abf 	.word	0x08003abf
 8003aac:	2300      	movs	r3, #0
 8003aae:	77fb      	strb	r3, [r7, #31]
 8003ab0:	e117      	b.n	8003ce2 <UART_SetConfig+0x346>
 8003ab2:	2302      	movs	r3, #2
 8003ab4:	77fb      	strb	r3, [r7, #31]
 8003ab6:	e114      	b.n	8003ce2 <UART_SetConfig+0x346>
 8003ab8:	2304      	movs	r3, #4
 8003aba:	77fb      	strb	r3, [r7, #31]
 8003abc:	e111      	b.n	8003ce2 <UART_SetConfig+0x346>
 8003abe:	2308      	movs	r3, #8
 8003ac0:	77fb      	strb	r3, [r7, #31]
 8003ac2:	e10e      	b.n	8003ce2 <UART_SetConfig+0x346>
 8003ac4:	2310      	movs	r3, #16
 8003ac6:	77fb      	strb	r3, [r7, #31]
 8003ac8:	e10b      	b.n	8003ce2 <UART_SetConfig+0x346>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a69      	ldr	r2, [pc, #420]	; (8003c74 <UART_SetConfig+0x2d8>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d120      	bne.n	8003b16 <UART_SetConfig+0x17a>
 8003ad4:	4b65      	ldr	r3, [pc, #404]	; (8003c6c <UART_SetConfig+0x2d0>)
 8003ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ada:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003ade:	2b30      	cmp	r3, #48	; 0x30
 8003ae0:	d013      	beq.n	8003b0a <UART_SetConfig+0x16e>
 8003ae2:	2b30      	cmp	r3, #48	; 0x30
 8003ae4:	d814      	bhi.n	8003b10 <UART_SetConfig+0x174>
 8003ae6:	2b20      	cmp	r3, #32
 8003ae8:	d009      	beq.n	8003afe <UART_SetConfig+0x162>
 8003aea:	2b20      	cmp	r3, #32
 8003aec:	d810      	bhi.n	8003b10 <UART_SetConfig+0x174>
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d002      	beq.n	8003af8 <UART_SetConfig+0x15c>
 8003af2:	2b10      	cmp	r3, #16
 8003af4:	d006      	beq.n	8003b04 <UART_SetConfig+0x168>
 8003af6:	e00b      	b.n	8003b10 <UART_SetConfig+0x174>
 8003af8:	2300      	movs	r3, #0
 8003afa:	77fb      	strb	r3, [r7, #31]
 8003afc:	e0f1      	b.n	8003ce2 <UART_SetConfig+0x346>
 8003afe:	2302      	movs	r3, #2
 8003b00:	77fb      	strb	r3, [r7, #31]
 8003b02:	e0ee      	b.n	8003ce2 <UART_SetConfig+0x346>
 8003b04:	2304      	movs	r3, #4
 8003b06:	77fb      	strb	r3, [r7, #31]
 8003b08:	e0eb      	b.n	8003ce2 <UART_SetConfig+0x346>
 8003b0a:	2308      	movs	r3, #8
 8003b0c:	77fb      	strb	r3, [r7, #31]
 8003b0e:	e0e8      	b.n	8003ce2 <UART_SetConfig+0x346>
 8003b10:	2310      	movs	r3, #16
 8003b12:	77fb      	strb	r3, [r7, #31]
 8003b14:	e0e5      	b.n	8003ce2 <UART_SetConfig+0x346>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a57      	ldr	r2, [pc, #348]	; (8003c78 <UART_SetConfig+0x2dc>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d120      	bne.n	8003b62 <UART_SetConfig+0x1c6>
 8003b20:	4b52      	ldr	r3, [pc, #328]	; (8003c6c <UART_SetConfig+0x2d0>)
 8003b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b26:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003b2a:	2bc0      	cmp	r3, #192	; 0xc0
 8003b2c:	d013      	beq.n	8003b56 <UART_SetConfig+0x1ba>
 8003b2e:	2bc0      	cmp	r3, #192	; 0xc0
 8003b30:	d814      	bhi.n	8003b5c <UART_SetConfig+0x1c0>
 8003b32:	2b80      	cmp	r3, #128	; 0x80
 8003b34:	d009      	beq.n	8003b4a <UART_SetConfig+0x1ae>
 8003b36:	2b80      	cmp	r3, #128	; 0x80
 8003b38:	d810      	bhi.n	8003b5c <UART_SetConfig+0x1c0>
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d002      	beq.n	8003b44 <UART_SetConfig+0x1a8>
 8003b3e:	2b40      	cmp	r3, #64	; 0x40
 8003b40:	d006      	beq.n	8003b50 <UART_SetConfig+0x1b4>
 8003b42:	e00b      	b.n	8003b5c <UART_SetConfig+0x1c0>
 8003b44:	2300      	movs	r3, #0
 8003b46:	77fb      	strb	r3, [r7, #31]
 8003b48:	e0cb      	b.n	8003ce2 <UART_SetConfig+0x346>
 8003b4a:	2302      	movs	r3, #2
 8003b4c:	77fb      	strb	r3, [r7, #31]
 8003b4e:	e0c8      	b.n	8003ce2 <UART_SetConfig+0x346>
 8003b50:	2304      	movs	r3, #4
 8003b52:	77fb      	strb	r3, [r7, #31]
 8003b54:	e0c5      	b.n	8003ce2 <UART_SetConfig+0x346>
 8003b56:	2308      	movs	r3, #8
 8003b58:	77fb      	strb	r3, [r7, #31]
 8003b5a:	e0c2      	b.n	8003ce2 <UART_SetConfig+0x346>
 8003b5c:	2310      	movs	r3, #16
 8003b5e:	77fb      	strb	r3, [r7, #31]
 8003b60:	e0bf      	b.n	8003ce2 <UART_SetConfig+0x346>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a45      	ldr	r2, [pc, #276]	; (8003c7c <UART_SetConfig+0x2e0>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d125      	bne.n	8003bb8 <UART_SetConfig+0x21c>
 8003b6c:	4b3f      	ldr	r3, [pc, #252]	; (8003c6c <UART_SetConfig+0x2d0>)
 8003b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b7a:	d017      	beq.n	8003bac <UART_SetConfig+0x210>
 8003b7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b80:	d817      	bhi.n	8003bb2 <UART_SetConfig+0x216>
 8003b82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b86:	d00b      	beq.n	8003ba0 <UART_SetConfig+0x204>
 8003b88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b8c:	d811      	bhi.n	8003bb2 <UART_SetConfig+0x216>
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d003      	beq.n	8003b9a <UART_SetConfig+0x1fe>
 8003b92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b96:	d006      	beq.n	8003ba6 <UART_SetConfig+0x20a>
 8003b98:	e00b      	b.n	8003bb2 <UART_SetConfig+0x216>
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	77fb      	strb	r3, [r7, #31]
 8003b9e:	e0a0      	b.n	8003ce2 <UART_SetConfig+0x346>
 8003ba0:	2302      	movs	r3, #2
 8003ba2:	77fb      	strb	r3, [r7, #31]
 8003ba4:	e09d      	b.n	8003ce2 <UART_SetConfig+0x346>
 8003ba6:	2304      	movs	r3, #4
 8003ba8:	77fb      	strb	r3, [r7, #31]
 8003baa:	e09a      	b.n	8003ce2 <UART_SetConfig+0x346>
 8003bac:	2308      	movs	r3, #8
 8003bae:	77fb      	strb	r3, [r7, #31]
 8003bb0:	e097      	b.n	8003ce2 <UART_SetConfig+0x346>
 8003bb2:	2310      	movs	r3, #16
 8003bb4:	77fb      	strb	r3, [r7, #31]
 8003bb6:	e094      	b.n	8003ce2 <UART_SetConfig+0x346>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a30      	ldr	r2, [pc, #192]	; (8003c80 <UART_SetConfig+0x2e4>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d125      	bne.n	8003c0e <UART_SetConfig+0x272>
 8003bc2:	4b2a      	ldr	r3, [pc, #168]	; (8003c6c <UART_SetConfig+0x2d0>)
 8003bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bc8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003bcc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003bd0:	d017      	beq.n	8003c02 <UART_SetConfig+0x266>
 8003bd2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003bd6:	d817      	bhi.n	8003c08 <UART_SetConfig+0x26c>
 8003bd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bdc:	d00b      	beq.n	8003bf6 <UART_SetConfig+0x25a>
 8003bde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003be2:	d811      	bhi.n	8003c08 <UART_SetConfig+0x26c>
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d003      	beq.n	8003bf0 <UART_SetConfig+0x254>
 8003be8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bec:	d006      	beq.n	8003bfc <UART_SetConfig+0x260>
 8003bee:	e00b      	b.n	8003c08 <UART_SetConfig+0x26c>
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	77fb      	strb	r3, [r7, #31]
 8003bf4:	e075      	b.n	8003ce2 <UART_SetConfig+0x346>
 8003bf6:	2302      	movs	r3, #2
 8003bf8:	77fb      	strb	r3, [r7, #31]
 8003bfa:	e072      	b.n	8003ce2 <UART_SetConfig+0x346>
 8003bfc:	2304      	movs	r3, #4
 8003bfe:	77fb      	strb	r3, [r7, #31]
 8003c00:	e06f      	b.n	8003ce2 <UART_SetConfig+0x346>
 8003c02:	2308      	movs	r3, #8
 8003c04:	77fb      	strb	r3, [r7, #31]
 8003c06:	e06c      	b.n	8003ce2 <UART_SetConfig+0x346>
 8003c08:	2310      	movs	r3, #16
 8003c0a:	77fb      	strb	r3, [r7, #31]
 8003c0c:	e069      	b.n	8003ce2 <UART_SetConfig+0x346>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a1c      	ldr	r2, [pc, #112]	; (8003c84 <UART_SetConfig+0x2e8>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d137      	bne.n	8003c88 <UART_SetConfig+0x2ec>
 8003c18:	4b14      	ldr	r3, [pc, #80]	; (8003c6c <UART_SetConfig+0x2d0>)
 8003c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c1e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003c22:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003c26:	d017      	beq.n	8003c58 <UART_SetConfig+0x2bc>
 8003c28:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003c2c:	d817      	bhi.n	8003c5e <UART_SetConfig+0x2c2>
 8003c2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c32:	d00b      	beq.n	8003c4c <UART_SetConfig+0x2b0>
 8003c34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c38:	d811      	bhi.n	8003c5e <UART_SetConfig+0x2c2>
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d003      	beq.n	8003c46 <UART_SetConfig+0x2aa>
 8003c3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c42:	d006      	beq.n	8003c52 <UART_SetConfig+0x2b6>
 8003c44:	e00b      	b.n	8003c5e <UART_SetConfig+0x2c2>
 8003c46:	2300      	movs	r3, #0
 8003c48:	77fb      	strb	r3, [r7, #31]
 8003c4a:	e04a      	b.n	8003ce2 <UART_SetConfig+0x346>
 8003c4c:	2302      	movs	r3, #2
 8003c4e:	77fb      	strb	r3, [r7, #31]
 8003c50:	e047      	b.n	8003ce2 <UART_SetConfig+0x346>
 8003c52:	2304      	movs	r3, #4
 8003c54:	77fb      	strb	r3, [r7, #31]
 8003c56:	e044      	b.n	8003ce2 <UART_SetConfig+0x346>
 8003c58:	2308      	movs	r3, #8
 8003c5a:	77fb      	strb	r3, [r7, #31]
 8003c5c:	e041      	b.n	8003ce2 <UART_SetConfig+0x346>
 8003c5e:	2310      	movs	r3, #16
 8003c60:	77fb      	strb	r3, [r7, #31]
 8003c62:	e03e      	b.n	8003ce2 <UART_SetConfig+0x346>
 8003c64:	efff69f3 	.word	0xefff69f3
 8003c68:	40011000 	.word	0x40011000
 8003c6c:	40023800 	.word	0x40023800
 8003c70:	40004400 	.word	0x40004400
 8003c74:	40004800 	.word	0x40004800
 8003c78:	40004c00 	.word	0x40004c00
 8003c7c:	40005000 	.word	0x40005000
 8003c80:	40011400 	.word	0x40011400
 8003c84:	40007800 	.word	0x40007800
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a71      	ldr	r2, [pc, #452]	; (8003e54 <UART_SetConfig+0x4b8>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d125      	bne.n	8003cde <UART_SetConfig+0x342>
 8003c92:	4b71      	ldr	r3, [pc, #452]	; (8003e58 <UART_SetConfig+0x4bc>)
 8003c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c98:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003c9c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003ca0:	d017      	beq.n	8003cd2 <UART_SetConfig+0x336>
 8003ca2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003ca6:	d817      	bhi.n	8003cd8 <UART_SetConfig+0x33c>
 8003ca8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cac:	d00b      	beq.n	8003cc6 <UART_SetConfig+0x32a>
 8003cae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cb2:	d811      	bhi.n	8003cd8 <UART_SetConfig+0x33c>
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d003      	beq.n	8003cc0 <UART_SetConfig+0x324>
 8003cb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003cbc:	d006      	beq.n	8003ccc <UART_SetConfig+0x330>
 8003cbe:	e00b      	b.n	8003cd8 <UART_SetConfig+0x33c>
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	77fb      	strb	r3, [r7, #31]
 8003cc4:	e00d      	b.n	8003ce2 <UART_SetConfig+0x346>
 8003cc6:	2302      	movs	r3, #2
 8003cc8:	77fb      	strb	r3, [r7, #31]
 8003cca:	e00a      	b.n	8003ce2 <UART_SetConfig+0x346>
 8003ccc:	2304      	movs	r3, #4
 8003cce:	77fb      	strb	r3, [r7, #31]
 8003cd0:	e007      	b.n	8003ce2 <UART_SetConfig+0x346>
 8003cd2:	2308      	movs	r3, #8
 8003cd4:	77fb      	strb	r3, [r7, #31]
 8003cd6:	e004      	b.n	8003ce2 <UART_SetConfig+0x346>
 8003cd8:	2310      	movs	r3, #16
 8003cda:	77fb      	strb	r3, [r7, #31]
 8003cdc:	e001      	b.n	8003ce2 <UART_SetConfig+0x346>
 8003cde:	2310      	movs	r3, #16
 8003ce0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	69db      	ldr	r3, [r3, #28]
 8003ce6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cea:	d15b      	bne.n	8003da4 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8003cec:	7ffb      	ldrb	r3, [r7, #31]
 8003cee:	2b08      	cmp	r3, #8
 8003cf0:	d827      	bhi.n	8003d42 <UART_SetConfig+0x3a6>
 8003cf2:	a201      	add	r2, pc, #4	; (adr r2, 8003cf8 <UART_SetConfig+0x35c>)
 8003cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cf8:	08003d1d 	.word	0x08003d1d
 8003cfc:	08003d25 	.word	0x08003d25
 8003d00:	08003d2d 	.word	0x08003d2d
 8003d04:	08003d43 	.word	0x08003d43
 8003d08:	08003d33 	.word	0x08003d33
 8003d0c:	08003d43 	.word	0x08003d43
 8003d10:	08003d43 	.word	0x08003d43
 8003d14:	08003d43 	.word	0x08003d43
 8003d18:	08003d3b 	.word	0x08003d3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d1c:	f7ff f9a4 	bl	8003068 <HAL_RCC_GetPCLK1Freq>
 8003d20:	61b8      	str	r0, [r7, #24]
        break;
 8003d22:	e013      	b.n	8003d4c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d24:	f7ff f9b4 	bl	8003090 <HAL_RCC_GetPCLK2Freq>
 8003d28:	61b8      	str	r0, [r7, #24]
        break;
 8003d2a:	e00f      	b.n	8003d4c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d2c:	4b4b      	ldr	r3, [pc, #300]	; (8003e5c <UART_SetConfig+0x4c0>)
 8003d2e:	61bb      	str	r3, [r7, #24]
        break;
 8003d30:	e00c      	b.n	8003d4c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d32:	f7ff f8ab 	bl	8002e8c <HAL_RCC_GetSysClockFreq>
 8003d36:	61b8      	str	r0, [r7, #24]
        break;
 8003d38:	e008      	b.n	8003d4c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d3e:	61bb      	str	r3, [r7, #24]
        break;
 8003d40:	e004      	b.n	8003d4c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8003d42:	2300      	movs	r3, #0
 8003d44:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	77bb      	strb	r3, [r7, #30]
        break;
 8003d4a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d074      	beq.n	8003e3c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	005a      	lsls	r2, r3, #1
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	085b      	lsrs	r3, r3, #1
 8003d5c:	441a      	add	r2, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	2b0f      	cmp	r3, #15
 8003d6e:	d916      	bls.n	8003d9e <UART_SetConfig+0x402>
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d76:	d212      	bcs.n	8003d9e <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	f023 030f 	bic.w	r3, r3, #15
 8003d80:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	085b      	lsrs	r3, r3, #1
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	f003 0307 	and.w	r3, r3, #7
 8003d8c:	b29a      	uxth	r2, r3
 8003d8e:	89fb      	ldrh	r3, [r7, #14]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	89fa      	ldrh	r2, [r7, #14]
 8003d9a:	60da      	str	r2, [r3, #12]
 8003d9c:	e04e      	b.n	8003e3c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	77bb      	strb	r3, [r7, #30]
 8003da2:	e04b      	b.n	8003e3c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003da4:	7ffb      	ldrb	r3, [r7, #31]
 8003da6:	2b08      	cmp	r3, #8
 8003da8:	d827      	bhi.n	8003dfa <UART_SetConfig+0x45e>
 8003daa:	a201      	add	r2, pc, #4	; (adr r2, 8003db0 <UART_SetConfig+0x414>)
 8003dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003db0:	08003dd5 	.word	0x08003dd5
 8003db4:	08003ddd 	.word	0x08003ddd
 8003db8:	08003de5 	.word	0x08003de5
 8003dbc:	08003dfb 	.word	0x08003dfb
 8003dc0:	08003deb 	.word	0x08003deb
 8003dc4:	08003dfb 	.word	0x08003dfb
 8003dc8:	08003dfb 	.word	0x08003dfb
 8003dcc:	08003dfb 	.word	0x08003dfb
 8003dd0:	08003df3 	.word	0x08003df3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dd4:	f7ff f948 	bl	8003068 <HAL_RCC_GetPCLK1Freq>
 8003dd8:	61b8      	str	r0, [r7, #24]
        break;
 8003dda:	e013      	b.n	8003e04 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ddc:	f7ff f958 	bl	8003090 <HAL_RCC_GetPCLK2Freq>
 8003de0:	61b8      	str	r0, [r7, #24]
        break;
 8003de2:	e00f      	b.n	8003e04 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003de4:	4b1d      	ldr	r3, [pc, #116]	; (8003e5c <UART_SetConfig+0x4c0>)
 8003de6:	61bb      	str	r3, [r7, #24]
        break;
 8003de8:	e00c      	b.n	8003e04 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dea:	f7ff f84f 	bl	8002e8c <HAL_RCC_GetSysClockFreq>
 8003dee:	61b8      	str	r0, [r7, #24]
        break;
 8003df0:	e008      	b.n	8003e04 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003df2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003df6:	61bb      	str	r3, [r7, #24]
        break;
 8003df8:	e004      	b.n	8003e04 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	77bb      	strb	r3, [r7, #30]
        break;
 8003e02:	bf00      	nop
    }

    if (pclk != 0U)
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d018      	beq.n	8003e3c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	085a      	lsrs	r2, r3, #1
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	441a      	add	r2, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	2b0f      	cmp	r3, #15
 8003e24:	d908      	bls.n	8003e38 <UART_SetConfig+0x49c>
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e2c:	d204      	bcs.n	8003e38 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	693a      	ldr	r2, [r7, #16]
 8003e34:	60da      	str	r2, [r3, #12]
 8003e36:	e001      	b.n	8003e3c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003e48:	7fbb      	ldrb	r3, [r7, #30]
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3720      	adds	r7, #32
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	40007c00 	.word	0x40007c00
 8003e58:	40023800 	.word	0x40023800
 8003e5c:	00f42400 	.word	0x00f42400

08003e60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b083      	sub	sp, #12
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6c:	f003 0301 	and.w	r3, r3, #1
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d00a      	beq.n	8003e8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	430a      	orrs	r2, r1
 8003e88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8e:	f003 0302 	and.w	r3, r3, #2
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d00a      	beq.n	8003eac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	430a      	orrs	r2, r1
 8003eaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb0:	f003 0304 	and.w	r3, r3, #4
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d00a      	beq.n	8003ece <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed2:	f003 0308 	and.w	r3, r3, #8
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d00a      	beq.n	8003ef0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	430a      	orrs	r2, r1
 8003eee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef4:	f003 0310 	and.w	r3, r3, #16
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d00a      	beq.n	8003f12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	430a      	orrs	r2, r1
 8003f10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f16:	f003 0320 	and.w	r3, r3, #32
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00a      	beq.n	8003f34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	430a      	orrs	r2, r1
 8003f32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d01a      	beq.n	8003f76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	430a      	orrs	r2, r1
 8003f54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f5e:	d10a      	bne.n	8003f76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	430a      	orrs	r2, r1
 8003f74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d00a      	beq.n	8003f98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	430a      	orrs	r2, r1
 8003f96:	605a      	str	r2, [r3, #4]
  }
}
 8003f98:	bf00      	nop
 8003f9a:	370c      	adds	r7, #12
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr

08003fa4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b086      	sub	sp, #24
 8003fa8:	af02      	add	r7, sp, #8
 8003faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003fb4:	f7fd fa10 	bl	80013d8 <HAL_GetTick>
 8003fb8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0308 	and.w	r3, r3, #8
 8003fc4:	2b08      	cmp	r3, #8
 8003fc6:	d10e      	bne.n	8003fe6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fc8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003fcc:	9300      	str	r3, [sp, #0]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f000 f817 	bl	800400a <UART_WaitOnFlagUntilTimeout>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d001      	beq.n	8003fe6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e00d      	b.n	8004002 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2220      	movs	r2, #32
 8003fea:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2220      	movs	r2, #32
 8003ff0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004000:	2300      	movs	r3, #0
}
 8004002:	4618      	mov	r0, r3
 8004004:	3710      	adds	r7, #16
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}

0800400a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800400a:	b580      	push	{r7, lr}
 800400c:	b084      	sub	sp, #16
 800400e:	af00      	add	r7, sp, #0
 8004010:	60f8      	str	r0, [r7, #12]
 8004012:	60b9      	str	r1, [r7, #8]
 8004014:	603b      	str	r3, [r7, #0]
 8004016:	4613      	mov	r3, r2
 8004018:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800401a:	e05e      	b.n	80040da <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004022:	d05a      	beq.n	80040da <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004024:	f7fd f9d8 	bl	80013d8 <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	69ba      	ldr	r2, [r7, #24]
 8004030:	429a      	cmp	r2, r3
 8004032:	d302      	bcc.n	800403a <UART_WaitOnFlagUntilTimeout+0x30>
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d11b      	bne.n	8004072 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004048:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	689a      	ldr	r2, [r3, #8]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f022 0201 	bic.w	r2, r2, #1
 8004058:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2220      	movs	r2, #32
 800405e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2220      	movs	r2, #32
 8004064:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2200      	movs	r2, #0
 800406a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e043      	b.n	80040fa <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0304 	and.w	r3, r3, #4
 800407c:	2b00      	cmp	r3, #0
 800407e:	d02c      	beq.n	80040da <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	69db      	ldr	r3, [r3, #28]
 8004086:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800408a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800408e:	d124      	bne.n	80040da <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004098:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80040a8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	689a      	ldr	r2, [r3, #8]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f022 0201 	bic.w	r2, r2, #1
 80040b8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2220      	movs	r2, #32
 80040be:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2220      	movs	r2, #32
 80040c4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2220      	movs	r2, #32
 80040ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e00f      	b.n	80040fa <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	69da      	ldr	r2, [r3, #28]
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	4013      	ands	r3, r2
 80040e4:	68ba      	ldr	r2, [r7, #8]
 80040e6:	429a      	cmp	r2, r3
 80040e8:	bf0c      	ite	eq
 80040ea:	2301      	moveq	r3, #1
 80040ec:	2300      	movne	r3, #0
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	461a      	mov	r2, r3
 80040f2:	79fb      	ldrb	r3, [r7, #7]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d091      	beq.n	800401c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040f8:	2300      	movs	r3, #0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3710      	adds	r7, #16
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
	...

08004104 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8004104:	b480      	push	{r7}
 8004106:	b085      	sub	sp, #20
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800410e:	2300      	movs	r3, #0
 8004110:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8004112:	2300      	movs	r3, #0
 8004114:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	2b01      	cmp	r3, #1
 800411c:	d027      	beq.n	800416e <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8004124:	68fa      	ldr	r2, [r7, #12]
 8004126:	4b2f      	ldr	r3, [pc, #188]	; (80041e4 <FMC_SDRAM_Init+0xe0>)
 8004128:	4013      	ands	r3, r2
 800412a:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004134:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800413a:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8004140:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 8004146:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800414c:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8004152:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8004158:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800415e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004160:	68fa      	ldr	r2, [r7, #12]
 8004162:	4313      	orrs	r3, r2
 8004164:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	68fa      	ldr	r2, [r7, #12]
 800416a:	601a      	str	r2, [r3, #0]
 800416c:	e032      	b.n	80041d4 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800417a:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8004184:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800418a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800418c:	68fa      	ldr	r2, [r7, #12]
 800418e:	4313      	orrs	r3, r2
 8004190:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8004198:	68ba      	ldr	r2, [r7, #8]
 800419a:	4b12      	ldr	r3, [pc, #72]	; (80041e4 <FMC_SDRAM_Init+0xe0>)
 800419c:	4013      	ands	r3, r2
 800419e:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80041a8:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 80041ae:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 80041b4:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 80041ba:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 80041c0:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80041c2:	68ba      	ldr	r2, [r7, #8]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	68fa      	ldr	r2, [r7, #12]
 80041cc:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	68ba      	ldr	r2, [r7, #8]
 80041d2:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3714      	adds	r7, #20
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop
 80041e4:	ffff8000 	.word	0xffff8000

080041e8 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b087      	sub	sp, #28
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 80041f4:	2300      	movs	r3, #0
 80041f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 80041f8:	2300      	movs	r3, #0
 80041fa:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d02e      	beq.n	8004260 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800420e:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	3b01      	subs	r3, #1
 800421c:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800421e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	3b01      	subs	r3, #1
 8004226:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8004228:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	3b01      	subs	r3, #1
 8004230:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8004232:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	691b      	ldr	r3, [r3, #16]
 8004238:	3b01      	subs	r3, #1
 800423a:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800423c:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	695b      	ldr	r3, [r3, #20]
 8004242:	3b01      	subs	r3, #1
 8004244:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8004246:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	699b      	ldr	r3, [r3, #24]
 800424c:	3b01      	subs	r3, #1
 800424e:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8004250:	4313      	orrs	r3, r2
 8004252:	697a      	ldr	r2, [r7, #20]
 8004254:	4313      	orrs	r3, r2
 8004256:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	697a      	ldr	r2, [r7, #20]
 800425c:	609a      	str	r2, [r3, #8]
 800425e:	e039      	b.n	80042d4 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8004266:	697a      	ldr	r2, [r7, #20]
 8004268:	4b1e      	ldr	r3, [pc, #120]	; (80042e4 <FMC_SDRAM_Timing_Init+0xfc>)
 800426a:	4013      	ands	r3, r2
 800426c:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	3b01      	subs	r3, #1
 8004274:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	695b      	ldr	r3, [r3, #20]
 800427a:	3b01      	subs	r3, #1
 800427c:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800427e:	4313      	orrs	r3, r2
 8004280:	697a      	ldr	r2, [r7, #20]
 8004282:	4313      	orrs	r3, r2
 8004284:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004292:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	3b01      	subs	r3, #1
 80042a0:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80042a2:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	3b01      	subs	r3, #1
 80042aa:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 80042ac:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	691b      	ldr	r3, [r3, #16]
 80042b2:	3b01      	subs	r3, #1
 80042b4:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 80042b6:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	699b      	ldr	r3, [r3, #24]
 80042bc:	3b01      	subs	r3, #1
 80042be:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80042c0:	4313      	orrs	r3, r2
 80042c2:	693a      	ldr	r2, [r7, #16]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	697a      	ldr	r2, [r7, #20]
 80042cc:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	693a      	ldr	r2, [r7, #16]
 80042d2:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	371c      	adds	r7, #28
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	ff0f0fff 	.word	0xff0f0fff

080042e8 <__libc_init_array>:
 80042e8:	b570      	push	{r4, r5, r6, lr}
 80042ea:	4d0d      	ldr	r5, [pc, #52]	; (8004320 <__libc_init_array+0x38>)
 80042ec:	4c0d      	ldr	r4, [pc, #52]	; (8004324 <__libc_init_array+0x3c>)
 80042ee:	1b64      	subs	r4, r4, r5
 80042f0:	10a4      	asrs	r4, r4, #2
 80042f2:	2600      	movs	r6, #0
 80042f4:	42a6      	cmp	r6, r4
 80042f6:	d109      	bne.n	800430c <__libc_init_array+0x24>
 80042f8:	4d0b      	ldr	r5, [pc, #44]	; (8004328 <__libc_init_array+0x40>)
 80042fa:	4c0c      	ldr	r4, [pc, #48]	; (800432c <__libc_init_array+0x44>)
 80042fc:	f000 f820 	bl	8004340 <_init>
 8004300:	1b64      	subs	r4, r4, r5
 8004302:	10a4      	asrs	r4, r4, #2
 8004304:	2600      	movs	r6, #0
 8004306:	42a6      	cmp	r6, r4
 8004308:	d105      	bne.n	8004316 <__libc_init_array+0x2e>
 800430a:	bd70      	pop	{r4, r5, r6, pc}
 800430c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004310:	4798      	blx	r3
 8004312:	3601      	adds	r6, #1
 8004314:	e7ee      	b.n	80042f4 <__libc_init_array+0xc>
 8004316:	f855 3b04 	ldr.w	r3, [r5], #4
 800431a:	4798      	blx	r3
 800431c:	3601      	adds	r6, #1
 800431e:	e7f2      	b.n	8004306 <__libc_init_array+0x1e>
 8004320:	08004378 	.word	0x08004378
 8004324:	08004378 	.word	0x08004378
 8004328:	08004378 	.word	0x08004378
 800432c:	0800437c 	.word	0x0800437c

08004330 <memset>:
 8004330:	4402      	add	r2, r0
 8004332:	4603      	mov	r3, r0
 8004334:	4293      	cmp	r3, r2
 8004336:	d100      	bne.n	800433a <memset+0xa>
 8004338:	4770      	bx	lr
 800433a:	f803 1b01 	strb.w	r1, [r3], #1
 800433e:	e7f9      	b.n	8004334 <memset+0x4>

08004340 <_init>:
 8004340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004342:	bf00      	nop
 8004344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004346:	bc08      	pop	{r3}
 8004348:	469e      	mov	lr, r3
 800434a:	4770      	bx	lr

0800434c <_fini>:
 800434c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800434e:	bf00      	nop
 8004350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004352:	bc08      	pop	{r3}
 8004354:	469e      	mov	lr, r3
 8004356:	4770      	bx	lr
